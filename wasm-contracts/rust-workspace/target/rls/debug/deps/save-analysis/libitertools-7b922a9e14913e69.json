{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2","program":"/home/matthew/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","itertools","/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_std\"","-C","metadata=7b922a9e14913e69","-C","extra-filename=-7b922a9e14913e69","--out-dir","/home/matthew/github.com/ampretia/wasm-contracts/rust-workspace/target/rls/debug/deps","-L","dependency=/home/matthew/github.com/ampretia/wasm-contracts/rust-workspace/target/rls/debug/deps","--extern","either=/home/matthew/github.com/ampretia/wasm-contracts/rust-workspace/target/rls/debug/deps/libeither-778fa74f1125e804.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/matthew/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/matthew/github.com/ampretia/wasm-contracts/rust-workspace/target/rls/debug/deps/libitertools-7b922a9e14913e69.rmeta"},"prelude":{"crate_id":{"name":"itertools","disambiguator":[15176684967519789436,13110985653941712645]},"crate_root":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src","external_crates":[{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14071373652398347879,7103549041170480253]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5273437404553270099,5411348343046199890]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[976218546544352998,2134245565175613459]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13100362557277821204,18082047403827332368]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3605767859335716447,18368004652892255649]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7644919710974821109,7113146966867899407]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16182386318199163571,1953714320961812]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12664401352052491985,6928826529401171483]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17274879524252775070,15165904048009513825]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3349673540409454496,14630436784565510244]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14546748579478228105,1074460191194833292]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5671097699487010686,7534711367382902334]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7229860330014108182,6606161976056509340]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7609715969379266585,5596137465280250730]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","num":15,"id":{"name":"either","disambiguator":[18010555842966798366,7801547210460872044]}}],"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":0,"byte_end":79440,"line_start":1,"line_end":2391,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":161},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":1446,"byte_end":1452,"line_start":55,"line_end":55,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":3342},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":1923,"byte_end":1927,"line_start":76,"line_end":76,"column_start":14,"column_end":18},"alias_span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":1931,"byte_end":1941,"line_start":76,"line_end":76,"column_start":22,"column_end":32},"name":"__std_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":300},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2027,"byte_end":2032,"line_start":81,"line_end":81,"column_start":9,"column_end":14},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":285},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2042,"byte_end":2049,"line_start":82,"line_end":82,"column_start":9,"column_end":16},"alias_span":null,"name":"DedupBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1578},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2059,"byte_end":2069,"line_start":83,"line_end":83,"column_start":9,"column_end":19},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1592},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2079,"byte_end":2097,"line_start":84,"line_end":84,"column_start":9,"column_end":27},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1616},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2107,"byte_end":2114,"line_start":85,"line_end":85,"column_start":9,"column_end":16},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1606},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2124,"byte_end":2131,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1631},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2141,"byte_end":2149,"line_start":87,"line_end":87,"column_start":9,"column_end":17},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2159,"byte_end":2166,"line_start":88,"line_end":88,"column_start":9,"column_end":16},"alias_span":null,"name":"MapInto","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":403},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2176,"byte_end":2186,"line_start":89,"line_end":89,"column_start":9,"column_end":19},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":221},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2196,"byte_end":2201,"line_start":90,"line_end":90,"column_start":9,"column_end":14},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":227},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2211,"byte_end":2218,"line_start":91,"line_end":91,"column_start":9,"column_end":16},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":325},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2228,"byte_end":2240,"line_start":92,"line_end":92,"column_start":9,"column_end":21},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1673},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2250,"byte_end":2259,"line_start":93,"line_end":93,"column_start":9,"column_end":18},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":264},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2269,"byte_end":2277,"line_start":94,"line_end":94,"column_start":9,"column_end":17},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1682},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2287,"byte_end":2304,"line_start":95,"line_end":95,"column_start":9,"column_end":26},"alias_span":null,"name":"TupleCombinations","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":431},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2314,"byte_end":2323,"line_start":96,"line_end":96,"column_start":9,"column_end":18},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":450},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2333,"byte_end":2339,"line_start":97,"line_end":97,"column_start":9,"column_end":15},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1641},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2395,"byte_end":2399,"line_start":100,"line_end":100,"column_start":23,"column_end":27},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1553},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2455,"byte_end":2467,"line_start":102,"line_end":102,"column_start":23,"column_end":35},"alias_span":null,"name":"MultiProduct","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":590},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2527,"byte_end":2539,"line_start":104,"line_end":104,"column_start":27,"column_end":39},"alias_span":null,"name":"Combinations","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1968},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2616,"byte_end":2643,"line_start":106,"line_end":106,"column_start":44,"column_end":71},"alias_span":null,"name":"CombinationsWithReplacement","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1959},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2675,"byte_end":2685,"line_start":107,"line_end":107,"column_start":31,"column_end":41},"alias_span":null,"name":"ConsTuples","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1979},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2716,"byte_end":2731,"line_start":108,"line_end":108,"column_start":30,"column_end":45},"alias_span":null,"name":"ExactlyOneError","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1989},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2754,"byte_end":2760,"line_start":109,"line_end":109,"column_start":22,"column_end":28},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":661},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2762,"byte_end":2772,"line_start":109,"line_end":109,"column_start":30,"column_end":40},"alias_span":null,"name":"FormatWith","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":811},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2833,"byte_end":2843,"line_start":111,"line_end":111,"column_start":27,"column_end":37},"alias_span":null,"name":"IntoChunks","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":835},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2845,"byte_end":2850,"line_start":111,"line_end":111,"column_start":39,"column_end":44},"alias_span":null,"name":"Chunk","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":825},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2852,"byte_end":2858,"line_start":111,"line_end":111,"column_start":46,"column_end":52},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":750},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2860,"byte_end":2867,"line_start":111,"line_end":111,"column_start":54,"column_end":61},"alias_span":null,"name":"GroupBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":788},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2869,"byte_end":2874,"line_start":111,"line_end":111,"column_start":63,"column_end":68},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":774},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2876,"byte_end":2882,"line_start":111,"line_end":111,"column_start":70,"column_end":76},"alias_span":null,"name":"Groups","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2042},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2910,"byte_end":2921,"line_start":112,"line_end":112,"column_start":26,"column_end":37},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":885},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2981,"byte_end":2987,"line_start":114,"line_end":114,"column_start":27,"column_end":33},"alias_span":null,"name":"KMerge","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":899},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":2989,"byte_end":2997,"line_start":114,"line_end":114,"column_start":35,"column_end":43},"alias_span":null,"name":"KMergeBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":949},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3024,"byte_end":3035,"line_start":115,"line_end":115,"column_start":25,"column_end":36},"alias_span":null,"name":"MergeJoinBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2102},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3097,"byte_end":3106,"line_start":117,"line_end":117,"column_start":29,"column_end":38},"alias_span":null,"name":"MultiPeek","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2113},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3130,"byte_end":3138,"line_start":118,"line_end":118,"column_start":23,"column_end":31},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1038},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3172,"byte_end":3188,"line_start":119,"line_end":119,"column_start":33,"column_end":49},"alias_span":null,"name":"PeekingTakeWhile","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1059},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3248,"byte_end":3260,"line_start":121,"line_end":121,"column_start":27,"column_end":39},"alias_span":null,"name":"Permutations","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2192},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3296,"byte_end":3310,"line_start":122,"line_end":122,"column_start":35,"column_end":49},"alias_span":null,"name":"ProcessResults","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2203},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3373,"byte_end":3381,"line_start":124,"line_end":124,"column_start":30,"column_end":38},"alias_span":null,"name":"PutBackN","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2213},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3440,"byte_end":3446,"line_start":126,"line_end":126,"column_start":26,"column_end":32},"alias_span":null,"name":"RcIter","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2219},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3469,"byte_end":3476,"line_start":127,"line_end":127,"column_start":22,"column_end":29},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1176},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3525,"byte_end":3535,"line_start":129,"line_end":129,"column_start":23,"column_end":33},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2228},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3537,"byte_end":3543,"line_start":129,"line_end":129,"column_start":35,"column_end":41},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2237},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3545,"byte_end":3552,"line_start":129,"line_end":129,"column_start":43,"column_end":50},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2257},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3604,"byte_end":3607,"line_start":131,"line_end":131,"column_start":18,"column_end":21},"alias_span":null,"name":"Tee","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2264},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3634,"byte_end":3645,"line_start":132,"line_end":132,"column_start":26,"column_end":37},"alias_span":null,"name":"TupleBuffer","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2271},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3647,"byte_end":3659,"line_start":132,"line_end":132,"column_start":39,"column_end":51},"alias_span":null,"name":"TupleWindows","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1243},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3661,"byte_end":3667,"line_start":132,"line_end":132,"column_start":53,"column_end":59},"alias_span":null,"name":"Tuples","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2341},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3728,"byte_end":3734,"line_start":134,"line_end":134,"column_start":27,"column_end":33},"alias_span":null,"name":"Unique","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2328},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3736,"byte_end":3744,"line_start":134,"line_end":134,"column_start":35,"column_end":43},"alias_span":null,"name":"UniqueBy","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1320},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3774,"byte_end":3786,"line_start":135,"line_end":135,"column_start":28,"column_end":40},"alias_span":null,"name":"WithPosition","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2376},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3813,"byte_end":3818,"line_start":136,"line_end":136,"column_start":26,"column_end":31},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2389},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3845,"byte_end":3855,"line_start":137,"line_end":137,"column_start":26,"column_end":36},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":2402},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3879,"byte_end":3882,"line_start":138,"line_end":138,"column_start":23,"column_end":26},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":19}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3924,"byte_end":3925,"line_start":141,"line_end":141,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"Step, ZipLongest, TakeWhileRef, MapResults, PutBack, Interleave, Tuples, UniqueBy, TupleCombinations, Permutations, MultiProduct, Positions, ZipEq, Merge, Batching, InterleaveShortest, Dedup, WhileSome, PutBackN, PeekingTakeWhile, MergeJoinBy, KMerge, GroupBy, IntoChunks, Format, CombinationsWithReplacement, Update, Coalesce, MergeBy, MapInto, TupleWindows, Tee, Product, DedupBy, Unique, WithPosition, PadUsing, KMergeBy, Intersperse, FormatWith, ExactlyOneError, Combinations","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":574},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3948,"byte_end":3954,"line_start":142,"line_end":142,"column_start":22,"column_end":28},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":584},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3982,"byte_end":3993,"line_start":143,"line_end":143,"column_start":27,"column_end":38},"alias_span":null,"name":"cons_tuples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":653},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4009,"byte_end":4018,"line_start":144,"line_end":144,"column_start":15,"column_end":24},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":637},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4034,"byte_end":4038,"line_start":145,"line_end":145,"column_start":15,"column_end":19},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":907},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4090,"byte_end":4099,"line_start":147,"line_end":147,"column_start":23,"column_end":32},"alias_span":null,"name":"kmerge_by","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2077},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4118,"byte_end":4130,"line_start":148,"line_end":148,"column_start":17,"column_end":29},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1023},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4160,"byte_end":4171,"line_start":149,"line_end":149,"column_start":29,"column_end":40},"alias_span":null,"name":"PeekingNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1103},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4203,"byte_end":4218,"line_start":150,"line_end":150,"column_start":31,"column_end":46},"alias_span":null,"name":"process_results","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1147},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4237,"byte_end":4245,"line_start":151,"line_end":151,"column_start":18,"column_end":26},"alias_span":null,"name":"repeat_n","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1181},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4286,"byte_end":4297,"line_start":153,"line_end":153,"column_start":19,"column_end":30},"alias_span":null,"name":"repeat_call","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1190},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4299,"byte_end":4305,"line_start":153,"line_end":153,"column_start":32,"column_end":38},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1213},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4307,"byte_end":4314,"line_start":153,"line_end":153,"column_start":40,"column_end":47},"alias_span":null,"name":"iterate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2348},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4340,"byte_end":4348,"line_start":154,"line_end":154,"column_start":24,"column_end":32},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4368,"byte_end":4376,"line_start":155,"line_end":155,"column_start":19,"column_end":27},"alias_span":null,"name":"multizip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1773},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4436,"byte_end":4448,"line_start":158,"line_end":158,"column_start":25,"column_end":37},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":142},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":124963,"byte_end":124973,"line_start":16,"line_end":16,"column_start":5,"column_end":15},"alias_span":null,"name":"interleave","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":224},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":124979,"byte_end":124984,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"alias_span":null,"name":"merge","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":161},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":124990,"byte_end":124998,"line_start":18,"line_end":18,"column_start":5,"column_end":13},"alias_span":null,"name":"put_back","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":1112},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":125056,"byte_end":125066,"line_start":21,"line_end":21,"column_start":26,"column_end":36},"alias_span":null,"name":"put_back_n","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":981},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":125120,"byte_end":125129,"line_start":23,"line_end":23,"column_start":25,"column_end":34},"alias_span":null,"name":"multipeek","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":897},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":125180,"byte_end":125186,"line_start":25,"line_end":25,"column_start":22,"column_end":28},"alias_span":null,"name":"kmerge","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":1338},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":125209,"byte_end":125215,"line_start":26,"line_end":26,"column_start":22,"column_end":28},"alias_span":null,"name":"zip_eq","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":945},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":125237,"byte_end":125250,"line_start":27,"line_end":27,"column_start":21,"column_end":34},"alias_span":null,"name":"merge_join_by","value":"","parent":{"krate":0,"index":521}},{"kind":"Use","ref_id":{"krate":0,"index":1126},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":125301,"byte_end":125307,"line_start":29,"line_end":29,"column_start":22,"column_end":28},"alias_span":null,"name":"rciter","value":"","parent":{"krate":0,"index":521}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":3924,"byte_end":3925,"line_start":141,"line_end":141,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"kmerge, zip_eq, interleave, merge, merge_join_by","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":0,"byte_end":79440,"line_start":1,"line_end":2391,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":478},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":578},{"krate":0,"index":587},{"krate":0,"index":604},{"krate":0,"index":619},{"krate":0,"index":634},{"krate":0,"index":658},{"krate":0,"index":685},{"krate":0,"index":693},{"krate":0,"index":850},{"krate":0,"index":864},{"krate":0,"index":924},{"krate":0,"index":937},{"krate":0,"index":967},{"krate":0,"index":976},{"krate":0,"index":1000},{"krate":0,"index":1019},{"krate":0,"index":1055},{"krate":0,"index":1094},{"krate":0,"index":1110},{"krate":0,"index":1122},{"krate":0,"index":1146},{"krate":0,"index":1159},{"krate":0,"index":1173},{"krate":0,"index":1216},{"krate":0,"index":1230},{"krate":0,"index":1279},{"krate":0,"index":1316},{"krate":0,"index":1336},{"krate":0,"index":1350},{"krate":0,"index":1374},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1541},{"krate":0,"index":1544},{"krate":0,"index":2575},{"krate":0,"index":2600},{"krate":0,"index":2597},{"krate":0,"index":2594},{"krate":0,"index":2589},{"krate":0,"index":2591},{"krate":0,"index":2583},{"krate":0,"index":2585},{"krate":0,"index":1549}],"decl_id":null,"docs":" Extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":19},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":1985,"byte_end":1992,"line_start":79,"line_end":79,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1553},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/multi_product.rs","byte_start":113109,"byte_end":113121,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"MultiProduct","qualname":"::adaptors::multi_product::MultiProduct","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n multiple iterators of type `I`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/multi_product.rs","byte_start":113024,"byte_end":113097,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1578},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":80842,"byte_end":80852,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1583}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":80757,"byte_end":80830,"line_start":34,"line_end":34,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":142},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":81182,"byte_end":81192,"line_start":52,"line_end":52,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"fn <I, J> (i: I, j: J) -> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1592},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":82457,"byte_end":82475,"line_start":98,"line_end":98,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":82372,"byte_end":82445,"line_start":97,"line_end":97,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1606},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":84877,"byte_end":84884,"line_start":187,"line_end":187,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1609}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":161},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":85021,"byte_end":85029,"line_start":195,"line_end":195,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"fn <I> (iterable: I) -> PutBack<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":85278,"byte_end":85288,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"fn (mut self, value: I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" put back value `value` (builder method)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":85444,"byte_end":85454,"line_start":215,"line_end":215,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"fn (self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":85423,"byte_end":85432,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":85719,"byte_end":85727,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":85698,"byte_end":85707,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1616},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":87188,"byte_end":87195,"line_start":276,"line_end":276,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":87103,"byte_end":87176,"line_start":275,"line_end":275,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1631},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":90035,"byte_end":90043,"line_start":372,"line_end":372,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":1634},{"krate":0,"index":1635}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":89950,"byte_end":90023,"line_start":371,"line_end":371,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1641},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":91167,"byte_end":91171,"line_start":414,"line_end":414,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1644}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":90975,"byte_end":91036,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"allow(deprecated)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":91037,"byte_end":91057,"line_start":411,"line_end":411,"column_start":1,"column_end":21}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":91082,"byte_end":91155,"line_start":413,"line_end":413,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":215},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":92189,"byte_end":92203,"line_start":466,"line_end":466,"column_start":11,"column_end":25},"name":"MergePredicate","qualname":"::adaptors::MergePredicate","value":"MergePredicate<T>","parent":null,"children":[{"krate":0,"index":217}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":92216,"byte_end":92226,"line_start":467,"line_end":467,"column_start":8,"column_end":18},"name":"merge_pred","qualname":"::adaptors::MergePredicate::merge_pred","value":"fn (&mut self, a: &T, b: &T) -> bool","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1651},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":92292,"byte_end":92300,"line_start":471,"line_end":471,"column_start":12,"column_end":20},"name":"MergeLte","qualname":"::adaptors::MergeLte","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":221},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":92800,"byte_end":92805,"line_start":486,"line_end":486,"column_start":10,"column_end":15},"name":"Merge","qualname":"::adaptors::Merge","value":"MergeBy<I, J, MergeLte>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":92717,"byte_end":92790,"line_start":485,"line_end":485,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":93090,"byte_end":93095,"line_start":499,"line_end":499,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"fn <I, J> (i: I, j: J) -> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":227},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":93695,"byte_end":93702,"line_start":514,"line_end":514,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":93610,"byte_end":93683,"line_start":513,"line_end":513,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":264},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":97132,"byte_end":97140,"line_start":642,"line_end":642,"column_start":12,"column_end":20},"name":"Coalesce","qualname":"::adaptors::Coalesce","value":"Coalesce {  }","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268}],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":97047,"byte_end":97120,"line_start":641,"line_end":641,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":285},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":98481,"byte_end":98488,"line_start":697,"line_end":697,"column_start":12,"column_end":19},"name":"DedupBy","qualname":"::adaptors::DedupBy","value":"DedupBy {  }","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289}],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, determining equality using a comparison function.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":98396,"byte_end":98469,"line_start":696,"line_end":696,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":290},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":98584,"byte_end":98598,"line_start":704,"line_end":704,"column_start":11,"column_end":25},"name":"DedupPredicate","qualname":"::adaptors::DedupPredicate","value":"DedupPredicate<T>","parent":null,"children":[{"krate":0,"index":292}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":98669,"byte_end":98679,"line_start":705,"line_end":705,"column_start":8,"column_end":18},"name":"dedup_pair","qualname":"::adaptors::DedupPredicate::dedup_pair","value":"fn (&mut self, a: &T, b: &T) -> bool","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1667},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":98745,"byte_end":98752,"line_start":709,"line_end":709,"column_start":12,"column_end":19},"name":"DedupEq","qualname":"::adaptors::DedupEq","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":300},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":99172,"byte_end":99177,"line_start":726,"line_end":726,"column_start":10,"column_end":15},"name":"Dedup","qualname":"::adaptors::Dedup","value":"DedupBy<I, DedupEq>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":325},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":101286,"byte_end":101298,"line_start":806,"line_end":806,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":101201,"byte_end":101274,"line_start":805,"line_end":805,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1673},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":102671,"byte_end":102680,"line_start":857,"line_end":857,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":1675}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":102586,"byte_end":102659,"line_start":856,"line_end":856,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1682},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":103531,"byte_end":103548,"line_start":891,"line_end":891,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":103446,"byte_end":103519,"line_start":890,"line_end":890,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":353},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":103699,"byte_end":103713,"line_start":900,"line_end":900,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>: Sized","parent":null,"children":[{"krate":0,"index":355}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":355},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":103735,"byte_end":103746,"line_start":901,"line_end":901,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1692},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":104367,"byte_end":104384,"line_start":929,"line_end":929,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":1694}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1715},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":106605,"byte_end":106622,"line_start":1010,"line_end":1010,"column_start":25,"column_end":42},"name":"Tuple2Combination","qualname":"::adaptors::Tuple2Combination","value":"Tuple2Combination {  }","parent":null,"children":[{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1740},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":106681,"byte_end":106698,"line_start":1011,"line_end":1011,"column_start":25,"column_end":42},"name":"Tuple3Combination","qualname":"::adaptors::Tuple3Combination","value":"Tuple3Combination {  }","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1765},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":106762,"byte_end":106779,"line_start":1012,"line_end":1012,"column_start":25,"column_end":42},"name":"Tuple4Combination","qualname":"::adaptors::Tuple4Combination","value":"Tuple4Combination {  }","parent":null,"children":[{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":376},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":107068,"byte_end":107075,"line_start":1018,"line_end":1018,"column_start":12,"column_end":19},"name":"MapInto","qualname":"::adaptors::MapInto","value":"MapInto {  }","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380}],"decl_id":null,"docs":" An iterator adapter to apply `Into` conversion to each element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":106983,"byte_end":107056,"line_start":1017,"line_end":1017,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":403},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":108436,"byte_end":108446,"line_start":1075,"line_end":1075,"column_start":12,"column_end":22},"name":"MapResults","qualname":"::adaptors::MapResults","value":"MapResults {  }","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407}],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":108351,"byte_end":108424,"line_start":1074,"line_end":1074,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":431},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":109737,"byte_end":109746,"line_start":1124,"line_end":1124,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":109652,"byte_end":109725,"line_start":1123,"line_end":1123,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":450},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":111162,"byte_end":111168,"line_start":1182,"line_end":1182,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":111077,"byte_end":111150,"line_start":1181,"line_end":1181,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1776},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":119117,"byte_end":119121,"line_start":9,"line_end":9,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1780},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":119185,"byte_end":119189,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1783},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":119251,"byte_end":119256,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1773},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":119059,"byte_end":119071,"line_start":7,"line_end":7,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"EitherOrBoth::{Both, Left, Right}","parent":null,"children":[{"krate":0,"index":1776},{"krate":0,"index":1780},{"krate":0,"index":1783}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":119375,"byte_end":119383,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"has_left","qualname":"<EitherOrBoth<A, B>>::has_left","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":119527,"byte_end":119536,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"has_right","qualname":"<EitherOrBoth<A, B>>::has_right","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":119709,"byte_end":119716,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"is_left","qualname":"<EitherOrBoth<A, B>>::is_left","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Left, return true otherwise, return false.\n Exclusive version of [`has_left`].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":119936,"byte_end":119944,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_right","qualname":"<EitherOrBoth<A, B>>::is_right","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Right, return true otherwise, return false.\n Exclusive version of [`has_right`].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":120177,"byte_end":120184,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"is_both","qualname":"<EitherOrBoth<A, B>>::is_both","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Right, return true otherwise, return false.\n Equivalent to `self.as_ref().both().is_some()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":120350,"byte_end":120354,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"left","qualname":"<EitherOrBoth<A, B>>::left","value":"fn (self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":120595,"byte_end":120600,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"right","qualname":"<EitherOrBoth<A, B>>::right","value":"fn (self) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":120816,"byte_end":120820,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"both","qualname":"<EitherOrBoth<A, B>>::both","value":"fn (self) -> Option<(A, B)>","parent":null,"children":[],"decl_id":null,"docs":" If Both, return `Some` tuple containing left and right.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":121030,"byte_end":121036,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<EitherOrBoth<A, B>>::as_ref","value":"fn (&self) -> EitherOrBoth<&A, &B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":121351,"byte_end":121357,"line_start":85,"line_end":85,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<EitherOrBoth<A, B>>::as_mut","value":"fn (&mut self) -> EitherOrBoth<&mut A, &mut B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":121679,"byte_end":121683,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"flip","qualname":"<EitherOrBoth<A, B>>::flip","value":"fn (self) -> EitherOrBoth<B, A>","parent":null,"children":[],"decl_id":null,"docs":" Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":122031,"byte_end":122039,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"map_left","qualname":"<EitherOrBoth<A, B>>::map_left","value":"fn <F, M> (self, f: F) -> EitherOrBoth<M, B>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `a` in `Left(a)` or `Both(a, b)` variants. If it is\n present rewrapping the result in `self`'s original variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":122447,"byte_end":122456,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"map_right","qualname":"<EitherOrBoth<A, B>>::map_right","value":"fn <F, M> (self, f: F) -> EitherOrBoth<A, M>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `b` in `Right(b)` or `Both(a, b)` variants.\n If it is present rewrapping the result in `self`'s original variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":122903,"byte_end":122910,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"map_any","qualname":"<EitherOrBoth<A, B>>::map_any","value":"fn <F, L, G, R> (self, f: F, g: G) -> EitherOrBoth<L, R>","parent":null,"children":[],"decl_id":null,"docs":" Apply the functions `f` and `g` on the value `a` and `b` respectively;\n found in `Left(a)`, `Right(b)`, or `Both(a, b)` variants.\n The Result is rewrapped `self`'s original variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":123311,"byte_end":123324,"line_start":145,"line_end":145,"column_start":12,"column_end":25},"name":"left_and_then","qualname":"<EitherOrBoth<A, B>>::left_and_then","value":"fn <F, L> (self, f: F) -> EitherOrBoth<L, B>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `b` in `Right(b)` or `Both(a, _)` variants if it is\n present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":123662,"byte_end":123676,"line_start":157,"line_end":157,"column_start":12,"column_end":26},"name":"right_and_then","qualname":"<EitherOrBoth<A, B>>::right_and_then","value":"fn <F, R> (self, f: F) -> EitherOrBoth<A, R>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `a`\n in `Left(a)` or `Both(a, _)` variants if it is present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":124032,"byte_end":124038,"line_start":170,"line_end":170,"column_start":12,"column_end":18},"name":"reduce","qualname":"<EitherOrBoth<T, T>>::reduce","value":"fn <F> (self, f: F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return either value of left, right, or the product of `f` applied where `Both` are present.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":521},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":553},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":569}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":125548,"byte_end":125557,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"fn <I> (iterable: I) -> iter::Enumerate<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":125879,"byte_end":125882,"line_start":59,"line_end":59,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"fn <I> (iterable: I) -> iter::Rev<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":126283,"byte_end":126286,"line_start":78,"line_end":78,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"fn <I, J> (i: I, j: J) -> Zip<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":126666,"byte_end":126671,"line_start":96,"line_end":96,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"fn <I, J> (i: I, j: J) -> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":127094,"byte_end":127100,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"fn <'a, I, T> (iterable: I) -> iter::Cloned<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":127488,"byte_end":127492,"line_start":128,"line_end":128,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"fn <I, B, F> (iterable: I, init: B, f: F) -> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":127867,"byte_end":127870,"line_start":144,"line_end":144,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":128230,"byte_end":128233,"line_start":160,"line_end":160,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":128558,"byte_end":128561,"line_start":176,"line_end":176,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":128874,"byte_end":128877,"line_start":192,"line_end":192,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":129270,"byte_end":129274,"line_start":210,"line_end":210,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"fn <I> (iterable: I, sep: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":129235,"byte_end":129262,"line_start":209,"line_end":209,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":129770,"byte_end":129776,"line_start":230,"line_end":230,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"fn <I> (iterable: I) -> VecIntoIter<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/free.rs","byte_start":129735,"byte_end":129762,"line_start":229,"line_end":229,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":574},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/concat_impl.rs","byte_start":130409,"byte_end":130415,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"fn <I> (iterable: I) -> I::Item","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1959},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/cons_tuples_impl.rs","byte_start":132191,"byte_end":132201,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":1962}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/cons_tuples_impl.rs","byte_start":132089,"byte_end":132162,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":584},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/cons_tuples_impl.rs","byte_start":132542,"byte_end":132553,"line_start":64,"line_end":64,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"fn <I, J> (iterable: I) -> ConsTuples<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":590},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations.rs","byte_start":132993,"byte_end":133005,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::combinations::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595}],"decl_id":null,"docs":" An iterator to iterate through all the `k`-length combinations in an iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations.rs","byte_start":132908,"byte_end":132981,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1968},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations_with_replacement.rs","byte_start":135694,"byte_end":135721,"line_start":9,"line_end":9,"column_start":12,"column_end":39},"name":"CombinationsWithReplacement","qualname":"::combinations_with_replacement::CombinationsWithReplacement","value":"CombinationsWithReplacement {  }","parent":null,"children":[{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator, with replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1979},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/exactly_one_err.rs","byte_start":139082,"byte_end":139097,"line_start":14,"line_end":14,"column_start":12,"column_end":27},"name":"ExactlyOneError","qualname":"::exactly_one_err::ExactlyOneError","value":"ExactlyOneError {  }","parent":null,"children":[{"krate":0,"index":1981},{"krate":0,"index":1982}],"decl_id":null,"docs":" Iterator returned for the error case of `IterTools::exactly_one()`\n This iterator yields exactly the same elements as the input iterator.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":640},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/diff.rs","byte_start":140945,"byte_end":140958,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":637},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":645},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/diff.rs","byte_start":141091,"byte_end":141098,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":637},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":649},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/diff.rs","byte_start":141219,"byte_end":141225,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":637},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":637},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/diff.rs","byte_start":140742,"byte_end":140746,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"Diff::{FirstMismatch, Shorter, Longer}","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":645},{"krate":0,"index":649}],"decl_id":null,"docs":" A type returned by the [`diff_with`](./fn.diff_with.html) function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/diff.rs","byte_start":141974,"byte_end":141983,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"fn <I, J, F> (i: I, j: J, is_equal: F) -> Option<Diff<I::IntoIter, J::IntoIter>>","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a `Diff` which describes how `j` differs from `i`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":661},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/format.rs","byte_start":143103,"byte_end":143113,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1989},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/format.rs","byte_start":143536,"byte_end":143542,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":1992},{"krate":0,"index":1993}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":700},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":146819,"byte_end":146822,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":698},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":750},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":156288,"byte_end":156295,"line_start":289,"line_end":289,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::groupbylazy::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755}],"decl_id":null,"docs":" `GroupBy` is the storage for the lazy grouping operation.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":156203,"byte_end":156276,"line_start":288,"line_end":288,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":774},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":158162,"byte_end":158168,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":779}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":158077,"byte_end":158150,"line_start":358,"line_end":358,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":788},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":159036,"byte_end":159041,"line_start":393,"line_end":393,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":811},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":160976,"byte_end":160986,"line_start":465,"line_end":465,"column_start":12,"column_end":22},"name":"IntoChunks","qualname":"::groupbylazy::IntoChunks","value":"IntoChunks {  }","parent":null,"children":[{"krate":0,"index":813},{"krate":0,"index":814}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":160891,"byte_end":160964,"line_start":464,"line_end":464,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":825},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":162109,"byte_end":162115,"line_start":510,"line_end":510,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":828}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":162024,"byte_end":162097,"line_start":509,"line_end":509,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":835},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":162833,"byte_end":162838,"line_start":541,"line_end":541,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2042},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/intersperse.rs","byte_start":163882,"byte_end":163893,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/intersperse.rs","byte_start":163780,"byte_end":163853,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":885},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":168563,"byte_end":168569,"line_start":115,"line_end":115,"column_start":10,"column_end":16},"name":"KMerge","qualname":"::kmerge_impl::KMerge","value":"KMergeBy<I, KMergeByLt>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":168480,"byte_end":168553,"line_start":114,"line_end":114,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":887},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":168611,"byte_end":168626,"line_start":117,"line_end":117,"column_start":11,"column_end":26},"name":"KMergePredicate","qualname":"::kmerge_impl::KMergePredicate","value":"KMergePredicate<T>","parent":null,"children":[{"krate":0,"index":889}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":168639,"byte_end":168650,"line_start":118,"line_end":118,"column_start":8,"column_end":19},"name":"kmerge_pred","qualname":"::kmerge_impl::KMergePredicate::kmerge_pred","value":"fn (&mut self, a: &T, b: &T) -> bool","parent":{"krate":0,"index":887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2060},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":168716,"byte_end":168726,"line_start":122,"line_end":122,"column_start":12,"column_end":22},"name":"KMergeByLt","qualname":"::kmerge_impl::KMergeByLt","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":897},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":169322,"byte_end":169328,"line_start":148,"line_end":148,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::kmerge_impl::kmerge","value":"fn <I> (iterable: I) -> KMerge<<I::Item as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators using\n the ordering function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":899},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":169903,"byte_end":169911,"line_start":164,"line_end":164,"column_start":12,"column_end":20},"name":"KMergeBy","qualname":"::kmerge_impl::KMergeBy","value":"KMergeBy {  }","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators\n according to an ordering function.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":169818,"byte_end":169891,"line_start":163,"line_end":163,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":907},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":170290,"byte_end":170299,"line_start":181,"line_end":181,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::kmerge_impl::kmerge_by","value":"fn <I, F> (iterable: I, mut less_than: F) -> KMergeBy<<I::Item as IntoIterator>::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":945},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/merge_join.rs","byte_start":173517,"byte_end":173530,"line_start":11,"line_end":11,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"fn <I, J, F> (left: I, right: J, cmp_fn: F) -> MergeJoinBy<I::IntoIter, J::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":949},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/merge_join.rs","byte_start":174156,"byte_end":174167,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/merge_join.rs","byte_start":174071,"byte_end":174144,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2079},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/minmax.rs","byte_start":176176,"byte_end":176186,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2081},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/minmax.rs","byte_start":176268,"byte_end":176278,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2084},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/minmax.rs","byte_start":176391,"byte_end":176397,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2077},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/minmax.rs","byte_start":176131,"byte_end":176143,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"MinMaxResult::{NoElements, OneElement, MinMax}","parent":null,"children":[{"krate":0,"index":2079},{"krate":0,"index":2081},{"krate":0,"index":2084}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\n more detail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/minmax.rs","byte_start":177215,"byte_end":177226,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"fn (self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.\n If the `MinMaxResult` has variant `OneElement(x)`, performing this\n operation will make one clone of `x`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2102},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":180026,"byte_end":180035,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::multipeek_impl::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":2104},{"krate":0,"index":2105},{"krate":0,"index":2106}],"decl_id":null,"docs":" See [`multipeek()`](../fn.multipeek.html) for more information.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":981},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":180261,"byte_end":180270,"line_start":20,"line_end":20,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::multipeek_impl::multipeek","value":"fn <I> (iterable: I) -> MultiPeek<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":180552,"byte_end":180562,"line_start":34,"line_end":34,"column_start":12,"column_end":22},"name":"reset_peek","qualname":"<MultiPeek<I>>::reset_peek","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the peeking “cursor”\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":180826,"byte_end":180830,"line_start":43,"line_end":43,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"fn (&mut self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like `.next()` with the only difference that it doesn't\n advance itself. `.peek()` can be called multiple times, to peek\n further ahead.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2113},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/pad_tail.rs","byte_start":182629,"byte_end":182637,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/pad_tail.rs","byte_start":182544,"byte_end":182617,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1023},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":184835,"byte_end":184846,"line_start":15,"line_end":15,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext: Iterator","parent":null,"children":[{"krate":0,"index":1024}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":185030,"byte_end":185042,"line_start":19,"line_end":19,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"fn <F> (&mut self, accept: F) -> Option<Self::Item>","parent":{"krate":0,"index":1023},"children":[],"decl_id":null,"docs":" Pass a reference to the next iterator element to the closure `accept`;\n if `accept` returns true, return it as the next element,\n else None.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1038},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":186561,"byte_end":186577,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":1042},{"krate":0,"index":1043}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":186476,"byte_end":186549,"line_start":79,"line_end":79,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1059},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/permutations.rs","byte_start":189124,"byte_end":189136,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"Permutations","qualname":"::permutations::Permutations","value":"Permutations {  }","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062}],"decl_id":null,"docs":" An iterator adaptor that iterates through all the `k`-permutations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/permutations.rs","byte_start":189039,"byte_end":189112,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2192},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/process_results_impl.rs","byte_start":197054,"byte_end":197068,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":2196},{"krate":0,"index":2197}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/process_results_impl.rs","byte_start":196952,"byte_end":197025,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1103},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/process_results_impl.rs","byte_start":198973,"byte_end":198988,"line_start":71,"line_end":71,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"fn <I, F, T, E, R> (iterable: I, processor: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2203},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/put_back_n_impl.rs","byte_start":199512,"byte_end":199520,"line_start":8,"line_end":8,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::put_back_n_impl::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":2205},{"krate":0,"index":2206}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1112},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/put_back_n_impl.rs","byte_start":199723,"byte_end":199733,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"put_back_n","qualname":"::put_back_n_impl::put_back_n","value":"fn <I> (iterable: I) -> PutBackN<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back multiple values to the front\n of the iteration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/put_back_n_impl.rs","byte_start":200316,"byte_end":200324,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Puts x in front of the iterator.\n The values are yielded in order of the most recently put back\n values first.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/put_back_n_impl.rs","byte_start":200295,"byte_end":200304,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2213},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/rciter_impl.rs","byte_start":200955,"byte_end":200961,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter_impl::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":2215}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2215},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/rciter_impl.rs","byte_start":201003,"byte_end":201009,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter_impl::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":2213},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1126},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/rciter_impl.rs","byte_start":202278,"byte_end":202284,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"rciter","qualname":"::rciter_impl::rciter","value":"fn <I> (iterable: I) -> RcIter<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2219},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/repeatn.rs","byte_start":203791,"byte_end":203798,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":2221},{"krate":0,"index":2222}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/repeatn.rs","byte_start":203697,"byte_end":203762,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1147},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/repeatn.rs","byte_start":203915,"byte_end":203923,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"fn <A> (element: A, n: usize) -> RepeatN<A>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1176},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":207621,"byte_end":207631,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":1178}],"decl_id":null,"docs":" See [`repeat_call`](../fn.repeat_call.html) for more information.\n","sig":null,"attributes":[{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":207545,"byte_end":207609,"line_start":9,"line_end":9,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1181},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":208388,"byte_end":208399,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"fn <F, A> (function: F) -> RepeatCall<F>","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":208316,"byte_end":208380,"line_start":41,"line_end":41,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1190},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":210006,"byte_end":210012,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"fn <A, St, F> (initial_state: St, f: F) -> Unfold<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2228},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":210438,"byte_end":210444,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":2231},{"krate":0,"index":2232}],"decl_id":null,"docs":" See [`unfold`](../fn.unfold.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":210361,"byte_end":210426,"line_start":117,"line_end":117,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2232},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":210552,"byte_end":210557,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":2228},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2237},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":211217,"byte_end":211224,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":2240},{"krate":0,"index":2241}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":211140,"byte_end":211205,"line_start":147,"line_end":147,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1213},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":211981,"byte_end":211988,"line_start":183,"line_end":183,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"fn <St, F> (initial_value: St, f: F) -> Iterate<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2257},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tee.rs","byte_start":212709,"byte_end":212712,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":2259},{"krate":0,"index":2260}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tee.rs","byte_start":212607,"byte_end":212680,"line_start":19,"line_end":19,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2264},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":214558,"byte_end":214569,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":2266},{"krate":0,"index":2267}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1243},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":215795,"byte_end":215801,"line_start":65,"line_end":65,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":1246},{"krate":0,"index":1247}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":215710,"byte_end":215783,"line_start":64,"line_end":64,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":216840,"byte_end":216851,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"fn (self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a buffer with the produced items that was not enough to be grouped in a tuple.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2271},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":217215,"byte_end":217227,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":2274},{"krate":0,"index":2275}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":217113,"byte_end":217186,"line_start":119,"line_end":119,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1269},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":218524,"byte_end":218536,"line_start":174,"line_end":174,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect: Sized","parent":null,"children":[{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1276},{"krate":0,"index":1277}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1270},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":218555,"byte_end":218559,"line_start":175,"line_end":175,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1271},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":218570,"byte_end":218576,"line_start":176,"line_end":176,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":218655,"byte_end":218672,"line_start":178,"line_end":178,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"fn <I> (iter: I, buf: &mut Self::Buffer) -> Option<Self>","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":218783,"byte_end":218807,"line_start":181,"line_end":181,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"fn <I> (iter: I) -> Option<Self>","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":218894,"byte_end":218903,"line_start":184,"line_end":184,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"fn () -> usize","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":218924,"byte_end":218939,"line_start":186,"line_end":186,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"fn (&mut self, item: Self::Item) -> ()","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2328},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":221666,"byte_end":221674,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::unique_impl::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":221581,"byte_end":221654,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2341},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":224296,"byte_end":224302,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"Unique","qualname":"::unique_impl::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":2343}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":224211,"byte_end":224284,"line_start":111,"line_end":111,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1320},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":225103,"byte_end":225115,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":225018,"byte_end":225091,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2350},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":225732,"byte_end":225737,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2353},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":225802,"byte_end":225808,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2356},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":225851,"byte_end":225855,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2359},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":225898,"byte_end":225902,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2348},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":225679,"byte_end":225687,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"Position::{First, Middle, Last, Only}","parent":null,"children":[{"krate":0,"index":2350},{"krate":0,"index":2353},{"krate":0,"index":2356},{"krate":0,"index":2359}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":225975,"byte_end":225985,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2376},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_eq_impl.rs","byte_start":227791,"byte_end":227796,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":2379},{"krate":0,"index":2380}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_eq_impl.rs","byte_start":227706,"byte_end":227779,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1338},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_eq_impl.rs","byte_start":228171,"byte_end":228177,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"fn <I, J> (i: I, j: J) -> ZipEq<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2389},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_longest.rs","byte_start":229602,"byte_end":229612,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":2392},{"krate":0,"index":2393}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_longest.rs","byte_start":229517,"byte_end":229590,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2402},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/ziptuple.rs","byte_start":231636,"byte_end":231639,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":2404}],"decl_id":null,"docs":" See [`multizip`](../fn.multizip.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/ziptuple.rs","byte_start":231551,"byte_end":231624,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1376},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/ziptuple.rs","byte_start":232803,"byte_end":232811,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"fn <T, U> (t: U) -> Zip<T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1382},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":9817,"byte_end":9826,"line_start":344,"line_end":344,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1385},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1401},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1407},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1423},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1451},{"krate":0,"index":1453},{"krate":0,"index":1455},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1480},{"krate":0,"index":1484},{"krate":0,"index":1487},{"krate":0,"index":1499},{"krate":0,"index":1502},{"krate":0,"index":1505},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1511},{"krate":0,"index":1514},{"krate":0,"index":1521},{"krate":0,"index":1524},{"krate":0,"index":1527},{"krate":0,"index":1531},{"krate":0,"index":1535}],"decl_id":null,"docs":" An [`Iterator`] blanket implementation that provides extra adaptors and\n methods.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":10225,"byte_end":10235,"line_start":359,"line_end":359,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"fn <J> (self, other: J) -> Interleave<Self, J::IntoIter>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both have run out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1385},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":10758,"byte_end":10777,"line_start":377,"line_end":377,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"fn <J> (self, other: J) -> InterleaveShortest<Self, J::IntoIter>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until at least one of them has run\n out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":11356,"byte_end":11367,"line_start":396,"line_end":396,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"fn (self, element: Self::Item) -> Intersperse<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":12610,"byte_end":12621,"line_start":430,"line_end":430,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"fn <J> (self, other: J) -> ZipLongest<Self, J::IntoIter>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":12593,"byte_end":12602,"line_start":429,"line_end":429,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":13059,"byte_end":13065,"line_start":443,"line_end":443,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"fn <J> (self, other: J) -> ZipEq<Self, J::IntoIter>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":13042,"byte_end":13051,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":13981,"byte_end":13989,"line_start":473,"line_end":473,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"fn <B, F> (self, f: F) -> Batching<Self, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the\n iterator and may pick off as many elements as it likes, to produce the\n next iterator element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":15620,"byte_end":15628,"line_start":514,"line_end":514,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"fn <K, F> (self, key: F) -> GroupBy<K, Self, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an *iterable* that can group iterator elements.\n Consecutive elements that map to the same key (“runs”), are assigned\n to the same group.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":15585,"byte_end":15612,"line_start":513,"line_end":513,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":16907,"byte_end":16913,"line_start":550,"line_end":550,"column_start":8,"column_end":14},"name":"chunks","qualname":"::Itertools::chunks","value":"fn (self, size: usize) -> IntoChunks<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an *iterable* that can chunk the iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":16872,"byte_end":16899,"line_start":549,"line_end":549,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":18269,"byte_end":18282,"line_start":588,"line_end":588,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"fn <T> (self) -> TupleWindows<Self, T>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator over all contiguous windows producing tuples of\n a specific size (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":19591,"byte_end":19597,"line_start":627,"line_end":627,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"fn <T> (self) -> Tuples<Self, T>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator that groups the items in tuples of a specific size\n (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":20406,"byte_end":20409,"line_start":652,"line_end":652,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"fn (self) -> (Tee<Self>, Tee<Self>)","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Split into an iterator pair that both yield all elements from\n the original iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":20371,"byte_end":20398,"line_start":651,"line_end":651,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":21138,"byte_end":21142,"line_start":677,"line_end":677,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"fn (self, n: usize) -> Step<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":21044,"byte_end":21105,"line_start":675,"line_end":675,"column_start":5,"column_end":66}},{"value":"allow(deprecated)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":21110,"byte_end":21130,"line_start":676,"line_end":676,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":21450,"byte_end":21458,"line_start":690,"line_end":690,"column_start":8,"column_end":16},"name":"map_into","qualname":"::Itertools::map_into","value":"fn <R> (self) -> MapInto<Self, R>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Convert each item of the iterator using the `Into` trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":22011,"byte_end":22022,"line_start":708,"line_end":708,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"fn <F, T, U, E> (self, f: F) -> MapResults<Self, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies the provided closure\n to every `Result::Ok` value. `Result::Err` values are\n unchanged.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":22685,"byte_end":22690,"line_start":729,"line_end":729,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"fn <J> (self, other: J) -> Merge<Self, J::IntoIter>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in\n ascending order.  If both base iterators are sorted (ascending), the\n result is sorted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":23467,"byte_end":23475,"line_start":753,"line_end":753,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"fn <J, F> (self, other: J, is_first: F) -> MergeBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like `.merge()` but allows for a custom ordering.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":25065,"byte_end":25078,"line_start":793,"line_end":793,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"fn <J, F> (self, other: J, cmp_fn: F) -> MergeJoinBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Create an iterator that merges items from both this and the specified\n iterator in ascending order.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":25048,"byte_end":25057,"line_start":792,"line_end":792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":25912,"byte_end":25918,"line_start":819,"line_end":819,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"fn (self) -> KMerge<<Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":25877,"byte_end":25904,"line_start":818,"line_end":818,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":26923,"byte_end":26932,"line_start":848,"line_end":848,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::Itertools::kmerge_by","value":"fn <F> (self, first: F) -> KMergeBy<<Self::Item as IntoIterator>::IntoIter, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them according to the given closure.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":26888,"byte_end":26915,"line_start":847,"line_end":847,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":27684,"byte_end":27701,"line_start":869,"line_end":869,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"fn <J> (self, other: J) -> Product<Self, J::IntoIter>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":29156,"byte_end":29179,"line_start":904,"line_end":904,"column_start":8,"column_end":31},"name":"multi_cartesian_product","qualname":"::Itertools::multi_cartesian_product","value":"fn (self) -> MultiProduct<<Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n all subiterators returned by meta-iterator `self`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":29121,"byte_end":29148,"line_start":903,"line_end":903,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":30672,"byte_end":30680,"line_start":941,"line_end":941,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"fn <F> (self, f: F) -> Coalesce<Self, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":31394,"byte_end":31399,"line_start":963,"line_end":963,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"fn (self) -> Dedup<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":32142,"byte_end":32150,"line_start":985,"line_end":985,"column_start":8,"column_end":16},"name":"dedup_by","qualname":"::Itertools::dedup_by","value":"fn <Cmp> (self, cmp: Cmp) -> DedupBy<Self, Cmp>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements,\n determining equality using a comparison function.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":32892,"byte_end":32898,"line_start":1007,"line_end":1007,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"fn (self) -> Unique<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration. Duplicates\n are detected using hash and equality.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":32857,"byte_end":32884,"line_start":1006,"line_end":1006,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":33655,"byte_end":33664,"line_start":1029,"line_end":1029,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"fn <V, F> (self, f: F) -> UniqueBy<Self, V, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":33620,"byte_end":33647,"line_start":1028,"line_end":1028,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1435},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":34401,"byte_end":34419,"line_start":1049,"line_end":1049,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"fn <F> (&mut self, accept: F) -> PeekingTakeWhile<Self, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from this iterator and\n takes items while the closure `accept` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":35365,"byte_end":35379,"line_start":1074,"line_end":1074,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"fn <F> (&mut self, accept: F) -> TakeWhileRef<Self, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `accept` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1439},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":36045,"byte_end":36055,"line_start":1095,"line_end":1095,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"fn <A> (self) -> WhileSome<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":37486,"byte_end":37504,"line_start":1134,"line_end":1134,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"fn <T> (self) -> TupleCombinations<Self, T>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of the\n elements from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":38713,"byte_end":38725,"line_start":1172,"line_end":1172,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"fn (self, k: usize) -> Combinations<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the `k`-length combinations of\n the elements from an iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":38678,"byte_end":38705,"line_start":1171,"line_end":1171,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":39532,"byte_end":39561,"line_start":1199,"line_end":1199,"column_start":8,"column_end":37},"name":"combinations_with_replacement","qualname":"::Itertools::combinations_with_replacement","value":"fn (self, k: usize) -> CombinationsWithReplacement<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator that iterates over the `k`-length combinations of\n the elements from an iterator, with replacement.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":39497,"byte_end":39524,"line_start":1198,"line_end":1198,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1445},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":41074,"byte_end":41086,"line_start":1245,"line_end":1245,"column_start":8,"column_end":20},"name":"permutations","qualname":"::Itertools::permutations","value":"fn (self, k: usize) -> Permutations<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over all k-permutations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":41039,"byte_end":41066,"line_start":1244,"line_end":1244,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":41916,"byte_end":41925,"line_start":1269,"line_end":1269,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"fn <F> (self, min: usize, f: F) -> PadUsing<Self, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":42850,"byte_end":42863,"line_start":1295,"line_end":1295,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"fn (self) -> WithPosition<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that wraps each element in a `Position` to\n ease special-case handling of the first or last elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":43542,"byte_end":43551,"line_start":1314,"line_end":1314,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"fn <P> (self, predicate: P) -> Positions<Self, P>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that yields the indices of all elements\n satisfying a predicate, counted from the start of the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":44104,"byte_end":44110,"line_start":1331,"line_end":1331,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"fn <F> (self, updater: F) -> Update<Self, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies a mutating function\n to each element before yielding it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":44735,"byte_end":44745,"line_start":1352,"line_end":1352,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"fn <T> (&mut self) -> Option<T>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next items grouped in a tuple of\n a specific size (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":45487,"byte_end":45500,"line_start":1377,"line_end":1377,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"fn <T> (mut self) -> Option<T>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Collects all items from the iterator into a tuple of a specific size\n (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":46181,"byte_end":46194,"line_start":1401,"line_end":1401,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"fn <P> (&mut self, mut pred: P) -> Option<(usize, Self::Item)>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":47043,"byte_end":47052,"line_start":1430,"line_end":1430,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"fn (&mut self) -> bool","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Check whether all elements compare equal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":47830,"byte_end":47838,"line_start":1455,"line_end":1455,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":48531,"byte_end":48544,"line_start":1479,"line_end":1479,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":49330,"byte_end":49337,"line_start":1507,"line_end":1507,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"fn <F> (self, f: F) -> ()","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[{"value":"deprecated(note = \"Use .for_each() instead\", since = \"0.8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":49264,"byte_end":49322,"line_start":1506,"line_end":1506,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":49968,"byte_end":49974,"line_start":1527,"line_end":1527,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"fn (self) -> Self::Item","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":50302,"byte_end":50313,"line_start":1537,"line_end":1537,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"fn (self) -> Vec<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" `.collect_vec()` is simply a type specialization of `.collect()`,\n for convenience.\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":50267,"byte_end":50294,"line_start":1536,"line_end":1536,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1467},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":50930,"byte_end":50938,"line_start":1559,"line_end":1559,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"fn <'a, A, J> (&mut self, from: J) -> usize","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":50913,"byte_end":50922,"line_start":1558,"line_end":1558,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":51682,"byte_end":51686,"line_start":1585,"line_end":1585,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"fn (&mut self, sep: &str) -> String","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, separated by `sep`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":51647,"byte_end":51674,"line_start":1584,"line_end":1584,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":52814,"byte_end":52820,"line_start":1619,"line_end":1619,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"fn (self, sep: &str) -> Format<Self>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":54298,"byte_end":54309,"line_start":1657,"line_end":1657,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"fn <F> (self, sep: &str, format: F) -> FormatWith<Self, F>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1475},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":56031,"byte_end":56043,"line_start":1706,"line_end":1706,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"fn <A, E, B, F> (&mut self, mut start: B, mut f: F) -> Result<B, E>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":57200,"byte_end":57212,"line_start":1738,"line_end":1738,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"fn <A, B, F> (&mut self, mut start: B, mut f: F) -> Option<B>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":58012,"byte_end":58017,"line_start":1763,"line_end":1763,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"fn <F> (mut self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":60005,"byte_end":60015,"line_start":1818,"line_end":1818,"column_start":8,"column_end":18},"name":"tree_fold1","qualname":"::Itertools::tree_fold1","value":"fn <F> (mut self, mut f: F) -> Option<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Accumulate the elements in the iterator in a tree-like manner.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":63574,"byte_end":63584,"line_start":1917,"line_end":1917,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"fn <B, F> (&mut self, init: B, mut f: F) -> FoldWhile<B>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" An iterator method that applies a function, producing a single, final value.","sig":null,"attributes":[{"value":"deprecated(note = \"Use .try_fold() instead\", since = \"0.8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":63508,"byte_end":63566,"line_start":1916,"line_end":1916,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":64651,"byte_end":64655,"line_start":1952,"line_end":1952,"column_start":8,"column_end":12},"name":"sum1","qualname":"::Itertools::sum1","value":"fn <S> (mut self) -> Option<S>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Iterate over the entire iterator and add all the elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":65518,"byte_end":65526,"line_start":1980,"line_end":1980,"column_start":8,"column_end":16},"name":"product1","qualname":"::Itertools::product1","value":"fn <P> (mut self) -> Option<P>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Iterate over the entire iterator and multiply all the elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":66417,"byte_end":66423,"line_start":2007,"line_end":2007,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"fn (self) -> VecIntoIter<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":66382,"byte_end":66409,"line_start":2006,"line_end":2006,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":67645,"byte_end":67654,"line_start":2042,"line_end":2042,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"fn <F> (self, cmp: F) -> VecIntoIter<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":67610,"byte_end":67637,"line_start":2041,"line_end":2041,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":68815,"byte_end":68828,"line_start":2075,"line_end":2075,"column_start":8,"column_end":21},"name":"sorted_by_key","qualname":"::Itertools::sorted_by_key","value":"fn <K, F> (self, f: F) -> VecIntoIter<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":68780,"byte_end":68807,"line_start":2074,"line_end":2074,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":69781,"byte_end":69794,"line_start":2106,"line_end":2106,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"fn <A, B, F, L, R> (self, mut predicate: F) -> (A, B)","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike `Iterator::partition`, each partition may\n have a distinct type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":70878,"byte_end":70892,"line_start":2138,"line_end":2138,"column_start":8,"column_end":22},"name":"into_group_map","qualname":"::Itertools::into_group_map","value":"fn <K, V> (self) -> HashMap<K, Vec<V>>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values\n are taken from `(Key, Value)` tuple pairs yielded by the input iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":70843,"byte_end":70870,"line_start":2137,"line_end":2137,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":72355,"byte_end":72361,"line_start":2180,"line_end":2180,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"fn (self) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":73057,"byte_end":73070,"line_start":2197,"line_end":2197,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"fn <K, F> (self, key: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":73708,"byte_end":73717,"line_start":2211,"line_end":2211,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"fn <F> (self, mut compare: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":74916,"byte_end":74927,"line_start":2238,"line_end":2238,"column_start":8,"column_end":19},"name":"exactly_one","qualname":"::Itertools::exactly_one","value":"fn (mut self) -> Result<Self::Item, ExactlyOneError<Self>>","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" If the iterator yields exactly one element, that element will be returned, otherwise\n an error will be returned containing an iterator that has the same output as the input\n iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1538},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":75914,"byte_end":75919,"line_start":2271,"line_end":2271,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"fn <I, J> (a: I, b: J) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1541},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":76739,"byte_end":76751,"line_start":2299,"line_end":2299,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"fn <I, J> (a: I, b: J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as *equal(a, b)*.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1544},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":77978,"byte_end":77987,"line_start":2341,"line_end":2341,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"fn <'a, A, I, F> (iter: I, mut pred: F) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2577},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":78923,"byte_end":78931,"line_start":2371,"line_end":2371,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2580},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":78992,"byte_end":78996,"line_start":2373,"line_end":2373,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2575},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":78863,"byte_end":78872,"line_start":2369,"line_end":2369,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"FoldWhile::{Continue, Done}","parent":null,"children":[{"krate":0,"index":2577},{"krate":0,"index":2580}],"decl_id":null,"docs":" An enum used for controlling the execution of `.fold_while()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1551},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":79088,"byte_end":79098,"line_start":2378,"line_end":2378,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value in the continue or done.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":79291,"byte_end":79298,"line_start":2385,"line_end":2385,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if `self` is `Done`, false if it is `Continue`.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/multi_product.rs","byte_start":114123,"byte_end":114135,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/multi_product.rs","byte_start":116241,"byte_end":116257,"line_start":117,"line_end":117,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/multi_product.rs","byte_start":116905,"byte_end":116917,"line_start":146,"line_end":146,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":81495,"byte_end":81505,"line_start":63,"line_end":63,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":82916,"byte_end":82934,"line_start":119,"line_end":119,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":85184,"byte_end":85191,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":85810,"byte_end":85817,"line_start":229,"line_end":229,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":87664,"byte_end":87671,"line_start":302,"line_end":302,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":90104,"byte_end":90112,"line_start":377,"line_end":377,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1640}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":90340,"byte_end":90348,"line_start":386,"line_end":386,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":91513,"byte_end":91517,"line_start":434,"line_end":434,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":92136,"byte_end":92140,"line_start":462,"line_end":462,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":92345,"byte_end":92353,"line_start":473,"line_end":473,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":93884,"byte_end":93891,"line_start":524,"line_end":524,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":94107,"byte_end":94108,"line_start":531,"line_end":531,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":94584,"byte_end":94591,"line_start":551,"line_end":551,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":94865,"byte_end":94872,"line_start":563,"line_end":563,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":96000,"byte_end":96012,"line_start":607,"line_end":607,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":97246,"byte_end":97254,"line_start":649,"line_end":649,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":97423,"byte_end":97431,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1666}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":97818,"byte_end":97826,"line_start":678,"line_end":678,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":98796,"byte_end":98803,"line_start":711,"line_end":711,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":98935,"byte_end":98936,"line_start":717,"line_end":717,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":99241,"byte_end":99248,"line_start":728,"line_end":728,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":99817,"byte_end":99824,"line_start":757,"line_end":757,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":99969,"byte_end":99976,"line_start":764,"line_end":764,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":101379,"byte_end":101391,"line_start":811,"line_end":811,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1672}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":101728,"byte_end":101740,"line_start":824,"line_end":824,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":102839,"byte_end":102848,"line_start":866,"line_end":866,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":104157,"byte_end":104174,"line_start":917,"line_end":917,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":104426,"byte_end":104443,"line_start":933,"line_end":933,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":104561,"byte_end":104578,"line_start":939,"line_end":939,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":107338,"byte_end":107345,"line_start":1031,"line_end":1031,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":107860,"byte_end":107867,"line_start":1054,"line_end":1054,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":108106,"byte_end":108113,"line_start":1065,"line_end":1065,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":108756,"byte_end":108766,"line_start":1091,"line_end":1091,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":110057,"byte_end":110066,"line_start":1142,"line_end":1142,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":110555,"byte_end":110564,"line_start":1164,"line_end":1164,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":111402,"byte_end":111408,"line_start":1196,"line_end":1196,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":112274,"byte_end":112280,"line_start":1232,"line_end":1232,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":112386,"byte_end":112392,"line_start":1238,"line_end":1238,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":119275,"byte_end":119287,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":506},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":123900,"byte_end":123912,"line_start":168,"line_end":168,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":124275,"byte_end":124287,"line_start":182,"line_end":182,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/cons_tuples_impl.rs","byte_start":132278,"byte_end":132288,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations.rs","byte_start":133128,"byte_end":133140,"line_start":16,"line_end":16,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations.rs","byte_start":133803,"byte_end":133815,"line_start":47,"line_end":47,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations_with_replacement.rs","byte_start":135971,"byte_end":135998,"line_start":22,"line_end":22,"column_start":24,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1978}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations_with_replacement.rs","byte_start":136157,"byte_end":136184,"line_start":30,"line_end":30,"column_start":9,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations_with_replacement.rs","byte_start":136885,"byte_end":136912,"line_start":59,"line_end":59,"column_start":22,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/exactly_one_err.rs","byte_start":139202,"byte_end":139217,"line_start":22,"line_end":22,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/exactly_one_err.rs","byte_start":139447,"byte_end":139462,"line_start":32,"line_end":32,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/exactly_one_err.rs","byte_start":140084,"byte_end":140099,"line_start":58,"line_end":58,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/format.rs","byte_start":144194,"byte_end":144204,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/format.rs","byte_start":144953,"byte_end":144959,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":146921,"byte_end":146922,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":147227,"byte_end":147237,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":147433,"byte_end":147443,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":148485,"byte_end":148495,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":155273,"byte_end":155283,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":157095,"byte_end":157102,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":158309,"byte_end":158315,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":159225,"byte_end":159230,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":159401,"byte_end":159406,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":161238,"byte_end":161248,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":162234,"byte_end":162240,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":162999,"byte_end":163004,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":163163,"byte_end":163168,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/intersperse.rs","byte_start":164266,"byte_end":164277,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":166087,"byte_end":166095,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":166991,"byte_end":166999,"line_start":64,"line_end":64,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":168772,"byte_end":168782,"line_start":124,"line_end":124,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":168917,"byte_end":168918,"line_start":130,"line_end":130,"column_start":56,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":170018,"byte_end":170026,"line_start":171,"line_end":171,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2064}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":170882,"byte_end":170890,"line_start":195,"line_end":195,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":171104,"byte_end":171112,"line_start":205,"line_end":205,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lazy_buffer.rs","byte_start":171993,"byte_end":172003,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lazy_buffer.rs","byte_start":172939,"byte_end":172949,"line_start":57,"line_end":57,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/merge_join.rs","byte_start":174302,"byte_end":174313,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2076}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/merge_join.rs","byte_start":174538,"byte_end":174549,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/minmax.rs","byte_start":176422,"byte_end":176434,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":180465,"byte_end":180474,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":180627,"byte_end":180636,"line_start":39,"line_end":39,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":181280,"byte_end":181289,"line_start":61,"line_end":61,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":181756,"byte_end":181765,"line_start":80,"line_end":80,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":182189,"byte_end":182198,"line_start":100,"line_end":100,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/pad_tail.rs","byte_start":183023,"byte_end":183031,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/pad_tail.rs","byte_start":183794,"byte_end":183802,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/pad_tail.rs","byte_start":184259,"byte_end":184267,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":185163,"byte_end":185171,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":185491,"byte_end":185498,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":185915,"byte_end":185923,"line_start":57,"line_end":57,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":186878,"byte_end":186894,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/permutations.rs","byte_start":189672,"byte_end":189684,"line_start":47,"line_end":47,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2191}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/permutations.rs","byte_start":190550,"byte_end":190562,"line_start":88,"line_end":88,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/permutations.rs","byte_start":193239,"byte_end":193251,"line_start":162,"line_end":162,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/permutations.rs","byte_start":194482,"byte_end":194495,"line_start":200,"line_end":200,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1087}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/process_results_impl.rs","byte_start":197166,"byte_end":197180,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/put_back_n_impl.rs","byte_start":199906,"byte_end":199914,"line_start":26,"line_end":26,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/put_back_n_impl.rs","byte_start":200416,"byte_end":200424,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/rciter_impl.rs","byte_start":202440,"byte_end":202446,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/rciter_impl.rs","byte_start":202581,"byte_end":202587,"line_start":60,"line_end":60,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/rciter_impl.rs","byte_start":203146,"byte_end":203152,"line_start":79,"line_end":79,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1139}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/repeatn.rs","byte_start":204127,"byte_end":204134,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/repeatn.rs","byte_start":204524,"byte_end":204531,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/repeatn.rs","byte_start":204681,"byte_end":204688,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":207673,"byte_end":207683,"line_start":14,"line_end":14,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2226}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":208522,"byte_end":208532,"line_start":48,"line_end":48,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":210201,"byte_end":210207,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2227}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":210594,"byte_end":210600,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":211289,"byte_end":211296,"line_start":153,"line_end":153,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2246}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":211399,"byte_end":211406,"line_start":159,"line_end":159,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tee.rs","byte_start":213120,"byte_end":213123,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tee.rs","byte_start":214220,"byte_end":214223,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":214648,"byte_end":214659,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":214832,"byte_end":214843,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":215509,"byte_end":215520,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":216169,"byte_end":216175,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":216387,"byte_end":216393,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":218000,"byte_end":218012,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":221816,"byte_end":221824,"line_start":19,"line_end":19,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":222622,"byte_end":222630,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":223347,"byte_end":223353,"line_start":79,"line_end":79,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":224380,"byte_end":224386,"line_start":116,"line_end":116,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2347}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":225918,"byte_end":225926,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":226205,"byte_end":226217,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":227453,"byte_end":227465,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_eq_impl.rs","byte_start":228383,"byte_end":228388,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_eq_impl.rs","byte_start":228966,"byte_end":228971,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_longest.rs","byte_start":229893,"byte_end":229903,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_longest.rs","byte_start":230525,"byte_end":230535,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1370}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_longest.rs","byte_start":231356,"byte_end":231366,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":75492,"byte_end":75493,"line_start":2258,"line_end":2258,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":79012,"byte_end":79021,"line_start":2376,"line_end":2376,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1551},{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":4473,"byte_end":4477,"line_start":160,"line_end":160,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":521}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/multi_product.rs","byte_start":114123,"byte_end":114135,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1553},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/multi_product.rs","byte_start":116241,"byte_end":116257,"line_start":117,"line_end":117,"column_start":9,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/multi_product.rs","byte_start":116905,"byte_end":116917,"line_start":146,"line_end":146,"column_start":22,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1553},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":81495,"byte_end":81505,"line_start":63,"line_end":63,"column_start":25,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1578},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":82916,"byte_end":82934,"line_start":119,"line_end":119,"column_start":25,"column_end":43},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":85184,"byte_end":85191,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":85810,"byte_end":85817,"line_start":229,"line_end":229,"column_start":22,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1606},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":87664,"byte_end":87671,"line_start":302,"line_end":302,"column_start":25,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1616},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":90104,"byte_end":90112,"line_start":377,"line_end":377,"column_start":27,"column_end":35},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1631},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":90340,"byte_end":90348,"line_start":386,"line_end":386,"column_start":28,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1631},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":91513,"byte_end":91517,"line_start":434,"line_end":434,"column_start":22,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1641},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":92136,"byte_end":92140,"line_start":462,"line_end":462,"column_start":31,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1641},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":92345,"byte_end":92353,"line_start":473,"line_end":473,"column_start":43,"column_end":51},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1651},"to":{"krate":0,"index":215}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":93884,"byte_end":93891,"line_start":524,"line_end":524,"column_start":30,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":227},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":94107,"byte_end":94108,"line_start":531,"line_end":531,"column_start":55,"column_end":56},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":241},"to":{"krate":0,"index":215}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":94584,"byte_end":94591,"line_start":551,"line_end":551,"column_start":25,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":227},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":94865,"byte_end":94872,"line_start":563,"line_end":563,"column_start":28,"column_end":35},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":227},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":96000,"byte_end":96012,"line_start":607,"line_end":607,"column_start":9,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":97246,"byte_end":97254,"line_start":649,"line_end":649,"column_start":36,"column_end":44},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":97423,"byte_end":97431,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":97818,"byte_end":97826,"line_start":678,"line_end":678,"column_start":25,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":98796,"byte_end":98803,"line_start":711,"line_end":711,"column_start":42,"column_end":49},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1667},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":98935,"byte_end":98936,"line_start":717,"line_end":717,"column_start":55,"column_end":56},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":298},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":99241,"byte_end":99248,"line_start":728,"line_end":728,"column_start":39,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":285},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":99817,"byte_end":99824,"line_start":757,"line_end":757,"column_start":30,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":285},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":99969,"byte_end":99976,"line_start":764,"line_end":764,"column_start":28,"column_end":35},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":285},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":101379,"byte_end":101391,"line_start":811,"line_end":811,"column_start":31,"column_end":43},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":325},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":101728,"byte_end":101740,"line_start":824,"line_end":824,"column_start":29,"column_end":41},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":325},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":102839,"byte_end":102848,"line_start":866,"line_end":866,"column_start":25,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1673},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":103718,"byte_end":103723,"line_start":900,"line_end":900,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":353}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":104157,"byte_end":104174,"line_start":917,"line_end":917,"column_start":25,"column_end":42},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1682},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":104426,"byte_end":104443,"line_start":933,"line_end":933,"column_start":21,"column_end":38},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1692},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":104561,"byte_end":104578,"line_start":939,"line_end":939,"column_start":32,"column_end":49},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1692},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":107338,"byte_end":107345,"line_start":1031,"line_end":1031,"column_start":25,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":376},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":107860,"byte_end":107867,"line_start":1054,"line_end":1054,"column_start":36,"column_end":43},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":376},"to":{"krate":2,"index":3910}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":108106,"byte_end":108113,"line_start":1065,"line_end":1065,"column_start":34,"column_end":41},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":376},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":108756,"byte_end":108766,"line_start":1091,"line_end":1091,"column_start":34,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":403},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":110057,"byte_end":110066,"line_start":1142,"line_end":1142,"column_start":25,"column_end":34},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":110555,"byte_end":110564,"line_start":1164,"line_end":1164,"column_start":36,"column_end":45},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":3910}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":111402,"byte_end":111408,"line_start":1196,"line_end":1196,"column_start":25,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":450},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":112274,"byte_end":112280,"line_start":1232,"line_end":1232,"column_start":34,"column_end":40},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":450},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/adaptors/mod.rs","byte_start":112386,"byte_end":112392,"line_start":1238,"line_end":1238,"column_start":36,"column_end":42},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":450},"to":{"krate":2,"index":3910}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":119275,"byte_end":119287,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":123900,"byte_end":123912,"line_start":168,"line_end":168,"column_start":9,"column_end":21},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/either_or_both.rs","byte_start":124275,"byte_end":124287,"line_start":182,"line_end":182,"column_start":43,"column_end":55},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1773},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/cons_tuples_impl.rs","byte_start":132278,"byte_end":132288,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1959},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations.rs","byte_start":133128,"byte_end":133140,"line_start":16,"line_end":16,"column_start":24,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":590},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations.rs","byte_start":133803,"byte_end":133815,"line_start":47,"line_end":47,"column_start":22,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":590},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations_with_replacement.rs","byte_start":135971,"byte_end":135998,"line_start":22,"line_end":22,"column_start":24,"column_end":51},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1968},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations_with_replacement.rs","byte_start":136157,"byte_end":136184,"line_start":30,"line_end":30,"column_start":9,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/combinations_with_replacement.rs","byte_start":136885,"byte_end":136912,"line_start":59,"line_end":59,"column_start":22,"column_end":49},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1968},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/exactly_one_err.rs","byte_start":139202,"byte_end":139217,"line_start":22,"line_end":22,"column_start":9,"column_end":24},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/exactly_one_err.rs","byte_start":139447,"byte_end":139462,"line_start":32,"line_end":32,"column_start":22,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1979},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/exactly_one_err.rs","byte_start":140084,"byte_end":140099,"line_start":58,"line_end":58,"column_start":31,"column_end":46},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1979},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/format.rs","byte_start":144194,"byte_end":144204,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":661},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/format.rs","byte_start":144953,"byte_end":144959,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1989},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":146921,"byte_end":146922,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":706},"to":{"krate":0,"index":698}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":147227,"byte_end":147237,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":147433,"byte_end":147443,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2036},"to":{"krate":0,"index":698}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":148485,"byte_end":148495,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":155273,"byte_end":155283,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":157095,"byte_end":157102,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":158309,"byte_end":158315,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":774},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":159225,"byte_end":159230,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":788},"to":{"krate":2,"index":1726}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":159401,"byte_end":159406,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":788},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":161238,"byte_end":161248,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":162234,"byte_end":162240,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":825},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":162999,"byte_end":163004,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":835},"to":{"krate":2,"index":1726}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/groupbylazy.rs","byte_start":163163,"byte_end":163168,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":835},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/intersperse.rs","byte_start":164266,"byte_end":164277,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2042},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":166087,"byte_end":166095,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":166991,"byte_end":166999,"line_start":64,"line_end":64,"column_start":19,"column_end":27},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2053},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":168772,"byte_end":168782,"line_start":124,"line_end":124,"column_start":44,"column_end":54},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2060},"to":{"krate":0,"index":887}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":168917,"byte_end":168918,"line_start":130,"line_end":130,"column_start":56,"column_end":57},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":895},"to":{"krate":0,"index":887}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":170018,"byte_end":170026,"line_start":171,"line_end":171,"column_start":27,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":899},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":170882,"byte_end":170890,"line_start":195,"line_end":195,"column_start":22,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":899},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/kmerge_impl.rs","byte_start":171104,"byte_end":171112,"line_start":205,"line_end":205,"column_start":25,"column_end":33},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":899},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lazy_buffer.rs","byte_start":171993,"byte_end":172003,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lazy_buffer.rs","byte_start":172939,"byte_end":172949,"line_start":57,"line_end":57,"column_start":25,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2065},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/merge_join.rs","byte_start":174302,"byte_end":174313,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":949},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/merge_join.rs","byte_start":174538,"byte_end":174549,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":949},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/minmax.rs","byte_start":176422,"byte_end":176434,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2077},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":180465,"byte_end":180474,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":180627,"byte_end":180636,"line_start":39,"line_end":39,"column_start":19,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":181280,"byte_end":181289,"line_start":61,"line_end":61,"column_start":25,"column_end":34},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2102},"to":{"krate":0,"index":1023}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":181756,"byte_end":181765,"line_start":80,"line_end":80,"column_start":22,"column_end":31},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2102},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/multipeek_impl.rs","byte_start":182189,"byte_end":182198,"line_start":100,"line_end":100,"column_start":31,"column_end":40},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2102},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/pad_tail.rs","byte_start":183023,"byte_end":183031,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2113},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/pad_tail.rs","byte_start":183794,"byte_end":183802,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2113},"to":{"krate":2,"index":3910}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/pad_tail.rs","byte_start":184259,"byte_end":184267,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2113},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":184849,"byte_end":184857,"line_start":15,"line_end":15,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3653},"to":{"krate":0,"index":1023}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":185163,"byte_end":185171,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"kind":{"Impl":{"id":89}},"from":{"krate":2,"index":29321},"to":{"krate":0,"index":1023}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":185491,"byte_end":185498,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1606},"to":{"krate":0,"index":1023}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":185915,"byte_end":185923,"line_start":57,"line_end":57,"column_start":25,"column_end":33},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2203},"to":{"krate":0,"index":1023}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/peeking_take_while.rs","byte_start":186878,"byte_end":186894,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1038},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/permutations.rs","byte_start":189672,"byte_end":189684,"line_start":47,"line_end":47,"column_start":24,"column_end":36},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1059},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/permutations.rs","byte_start":190550,"byte_end":190562,"line_start":88,"line_end":88,"column_start":22,"column_end":34},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1059},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/permutations.rs","byte_start":193239,"byte_end":193251,"line_start":162,"line_end":162,"column_start":9,"column_end":21},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/permutations.rs","byte_start":194482,"byte_end":194495,"line_start":200,"line_end":200,"column_start":6,"column_end":19},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/process_results_impl.rs","byte_start":197166,"byte_end":197180,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2192},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/put_back_n_impl.rs","byte_start":199906,"byte_end":199914,"line_start":26,"line_end":26,"column_start":19,"column_end":27},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/put_back_n_impl.rs","byte_start":200416,"byte_end":200424,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2203},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/rciter_impl.rs","byte_start":202440,"byte_end":202446,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2213},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/rciter_impl.rs","byte_start":202581,"byte_end":202587,"line_start":60,"line_end":60,"column_start":25,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2213},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/rciter_impl.rs","byte_start":203146,"byte_end":203152,"line_start":79,"line_end":79,"column_start":33,"column_end":39},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2213},"to":{"krate":2,"index":3910}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/repeatn.rs","byte_start":204127,"byte_end":204134,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2219},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/repeatn.rs","byte_start":204524,"byte_end":204531,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2219},"to":{"krate":2,"index":3910}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/repeatn.rs","byte_start":204681,"byte_end":204688,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2219},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":207673,"byte_end":207683,"line_start":14,"line_end":14,"column_start":24,"column_end":34},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1176},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":208522,"byte_end":208532,"line_start":48,"line_end":48,"column_start":25,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1176},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":210201,"byte_end":210207,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2228},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":210594,"byte_end":210600,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2228},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":211289,"byte_end":211296,"line_start":153,"line_end":153,"column_start":28,"column_end":35},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2237},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/sources.rs","byte_start":211399,"byte_end":211406,"line_start":159,"line_end":159,"column_start":26,"column_end":33},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2237},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tee.rs","byte_start":213120,"byte_end":213123,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2257},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tee.rs","byte_start":214220,"byte_end":214223,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2257},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":214648,"byte_end":214659,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2264},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":214832,"byte_end":214843,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2264},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":215509,"byte_end":215520,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2264},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":216169,"byte_end":216175,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1243},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":216387,"byte_end":216393,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":218000,"byte_end":218012,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2271},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/tuple_impl.rs","byte_start":218538,"byte_end":218543,"line_start":174,"line_end":174,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":1269}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":221816,"byte_end":221824,"line_start":19,"line_end":19,"column_start":30,"column_end":38},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":222622,"byte_end":222630,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":223347,"byte_end":223353,"line_start":79,"line_end":79,"column_start":22,"column_end":28},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2341},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/unique_impl.rs","byte_start":224380,"byte_end":224386,"line_start":116,"line_end":116,"column_start":24,"column_end":30},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2341},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":225918,"byte_end":225926,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":226205,"byte_end":226217,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1320},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/with_position.rs","byte_start":227453,"byte_end":227465,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1320},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_eq_impl.rs","byte_start":228383,"byte_end":228388,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_eq_impl.rs","byte_start":228966,"byte_end":228971,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_longest.rs","byte_start":229893,"byte_end":229903,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_longest.rs","byte_start":230525,"byte_end":230535,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":3910}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/zip_longest.rs","byte_start":231356,"byte_end":231366,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":3939}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":9829,"byte_end":9837,"line_start":344,"line_end":344,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3653},"to":{"krate":0,"index":1382}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":75492,"byte_end":75493,"line_start":2258,"line_end":2258,"column_start":31,"column_end":32},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1537},"to":{"krate":0,"index":1382}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.2/src/lib.rs","byte_start":79012,"byte_end":79021,"line_start":2376,"line_end":2376,"column_start":9,"column_end":18},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2575},"to":{"krate":4294967295,"index":4294967295}}]}
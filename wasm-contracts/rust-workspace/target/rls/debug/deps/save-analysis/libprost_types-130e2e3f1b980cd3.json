{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0","program":"/home/matthew/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","prost_types","/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=130e2e3f1b980cd3","-C","extra-filename=-130e2e3f1b980cd3","--out-dir","/home/matthew/github.com/ampretia/wasm-contracts/rust-workspace/target/rls/debug/deps","-L","dependency=/home/matthew/github.com/ampretia/wasm-contracts/rust-workspace/target/rls/debug/deps","--extern","bytes=/home/matthew/github.com/ampretia/wasm-contracts/rust-workspace/target/rls/debug/deps/libbytes-3de275b91093dcfe.rmeta","--extern","prost=/home/matthew/github.com/ampretia/wasm-contracts/rust-workspace/target/rls/debug/deps/libprost-ea495ae21531500d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/matthew/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/matthew/github.com/ampretia/wasm-contracts/rust-workspace/target/rls/debug/deps/libprost_types-130e2e3f1b980cd3.rmeta"},"prelude":{"crate_id":{"name":"prost_types","disambiguator":[11660354466105509173,832269494372019444]},"crate_root":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src","external_crates":[{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14071373652398347879,7103549041170480253]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5273437404553270099,5411348343046199890]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[976218546544352998,2134245565175613459]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13100362557277821204,18082047403827332368]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3605767859335716447,18368004652892255649]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7644919710974821109,7113146966867899407]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16182386318199163571,1953714320961812]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12664401352052491985,6928826529401171483]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17274879524252775070,15165904048009513825]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3349673540409454496,14630436784565510244]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14546748579478228105,1074460191194833292]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5671097699487010686,7534711367382902334]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7229860330014108182,6606161976056509340]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7609715969379266585,5596137465280250730]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","num":15,"id":{"name":"prost","disambiguator":[1527220525603700680,6904139664116589325]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","num":16,"id":{"name":"prost_derive","disambiguator":[14059225254442988537,8427390257223097502]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","num":17,"id":{"name":"bytes","disambiguator":[5604015932396551690,17611270832101749166]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","num":18,"id":{"name":"byteorder","disambiguator":[11313478889500985618,15806133796731293058]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","num":19,"id":{"name":"iovec","disambiguator":[14573816440830957265,8343811428407228812]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","num":20,"id":{"name":"libc","disambiguator":[17373465292948197007,11592364133634976501]}}],"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":0,"byte_end":5298,"line_start":1,"line_end":150,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":0,"byte_end":5298,"line_start":1,"line_end":150,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":31},{"krate":0,"index":54},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":33},{"krate":0,"index":56},{"krate":0,"index":164},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":69},{"krate":0,"index":166},{"krate":0,"index":229},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":177},{"krate":0,"index":20},{"krate":0,"index":334},{"krate":0,"index":357},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":336},{"krate":0,"index":359},{"krate":0,"index":513},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":370},{"krate":0,"index":21},{"krate":0,"index":634},{"krate":0,"index":672},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":637},{"krate":0,"index":674},{"krate":0,"index":727},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":680},{"krate":0,"index":22},{"krate":0,"index":779},{"krate":0,"index":830},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":783},{"krate":0,"index":832},{"krate":0,"index":872},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":836},{"krate":0,"index":874},{"krate":0,"index":964},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":881},{"krate":0,"index":966},{"krate":0,"index":1256},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":988},{"krate":0,"index":23},{"krate":0,"index":1295},{"krate":0,"index":1371},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1301},{"krate":0,"index":1373},{"krate":0,"index":1487},{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1381},{"krate":0,"index":24},{"krate":0,"index":1563},{"krate":0,"index":1586},{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1565},{"krate":0,"index":1588},{"krate":0,"index":1638},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1592},{"krate":0,"index":1640},{"krate":0,"index":1677},{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1643},{"krate":0,"index":1679},{"krate":0,"index":1716},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1682},{"krate":0,"index":1718},{"krate":0,"index":1774},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1722},{"krate":0,"index":25},{"krate":0,"index":1813},{"krate":0,"index":1915},{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1821},{"krate":0,"index":26},{"krate":0,"index":1948},{"krate":0,"index":1971},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1950},{"krate":0,"index":27},{"krate":0,"index":2056},{"krate":0,"index":2079},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2058},{"krate":0,"index":28},{"krate":0,"index":2155},{"krate":0,"index":2184},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2158},{"krate":0,"index":2186},{"krate":0,"index":2211},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2188},{"krate":0,"index":2213},{"krate":0,"index":2268},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2220},{"krate":0,"index":2270},{"krate":0,"index":2344},{"krate":0,"index":2340},{"krate":0,"index":2341},{"krate":0,"index":2281},{"krate":0,"index":29},{"krate":0,"index":2471},{"krate":0,"index":2515},{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":2477},{"krate":0,"index":2517},{"krate":0,"index":2548},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2521},{"krate":0,"index":2550},{"krate":0,"index":2578},{"krate":0,"index":2574},{"krate":0,"index":2575},{"krate":0,"index":2553},{"krate":0,"index":2580},{"krate":0,"index":2612},{"krate":0,"index":2611},{"krate":0,"index":2609},{"krate":0,"index":2606},{"krate":0,"index":2607},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2600},{"krate":0,"index":2598},{"krate":0,"index":2596},{"krate":0,"index":2587},{"krate":0,"index":2614},{"krate":0,"index":2664},{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2622},{"krate":0,"index":2666},{"krate":0,"index":2721},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2674},{"krate":0,"index":2723},{"krate":0,"index":2752},{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2726},{"krate":0,"index":2754},{"krate":0,"index":2783},{"krate":0,"index":2779},{"krate":0,"index":2780},{"krate":0,"index":2757},{"krate":0,"index":2785},{"krate":0,"index":2817},{"krate":0,"index":2813},{"krate":0,"index":2814},{"krate":0,"index":2787},{"krate":0,"index":2819},{"krate":0,"index":2855},{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2821},{"krate":0,"index":2857},{"krate":0,"index":2880},{"krate":0,"index":2876},{"krate":0,"index":2877},{"krate":0,"index":2859},{"krate":0,"index":30},{"krate":0,"index":2938},{"krate":0,"index":2961},{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2940},{"krate":0,"index":2963},{"krate":0,"index":2992},{"krate":0,"index":2991},{"krate":0,"index":2989},{"krate":0,"index":2986},{"krate":0,"index":2987},{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2980},{"krate":0,"index":2978},{"krate":0,"index":2976},{"krate":0,"index":2967},{"krate":0,"index":2994},{"krate":0,"index":3023},{"krate":0,"index":3019},{"krate":0,"index":3020},{"krate":0,"index":2997},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18}],"decl_id":null,"docs":" Protocol Buffers well-known types.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":31},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589018,"byte_end":7589035,"line_start":4,"line_end":4,"column_start":12,"column_end":29},"name":"FileDescriptorSet","qualname":"::FileDescriptorSet","value":"FileDescriptorSet { file }","parent":null,"children":[{"krate":0,"index":32}],"decl_id":null,"docs":" The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":32},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589087,"byte_end":7589091,"line_start":6,"line_end":6,"column_start":9,"column_end":13},"name":"file","qualname":"::FileDescriptorSet::file","value":"std::vec::Vec<FileDescriptorProto>","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589042,"byte_end":7589078,"line_start":5,"line_end":5,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":56},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589228,"byte_end":7589247,"line_start":10,"line_end":10,"column_start":12,"column_end":31},"name":"FileDescriptorProto","qualname":"::FileDescriptorProto","value":"FileDescriptorProto { name, package, dependency, public_dependency, weak_dependency, message_type, enum_type, service, extension, options, source_code_info, syntax }","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68}],"decl_id":null,"docs":" Describes a complete .proto file.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":57},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589349,"byte_end":7589353,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"name","qualname":"::FileDescriptorProto::name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" file name, relative to root of source tree\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589305,"byte_end":7589340,"line_start":12,"line_end":12,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":58},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589483,"byte_end":7589490,"line_start":16,"line_end":16,"column_start":9,"column_end":16},"name":"package","qualname":"::FileDescriptorProto::package","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" e.g. \"foo\", \"foo.bar\", etc.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589439,"byte_end":7589474,"line_start":15,"line_end":15,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":59},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589630,"byte_end":7589640,"line_start":19,"line_end":19,"column_start":9,"column_end":19},"name":"dependency","qualname":"::FileDescriptorProto::dependency","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Names of files imported by this file.\n","sig":null,"attributes":[{"value":"prost(string, repeated, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589586,"byte_end":7589621,"line_start":18,"line_end":18,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":60},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589819,"byte_end":7589836,"line_start":22,"line_end":22,"column_start":9,"column_end":26},"name":"public_dependency","qualname":"::FileDescriptorProto::public_dependency","value":"std::vec::Vec<i32>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Indexes of the public imported files in the dependency list above.\n","sig":null,"attributes":[{"value":"prost(int32, repeated, packed = \"false\", tag = \"10\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589759,"byte_end":7589810,"line_start":21,"line_end":21,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":61},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590047,"byte_end":7590062,"line_start":26,"line_end":26,"column_start":9,"column_end":24},"name":"weak_dependency","qualname":"::FileDescriptorProto::weak_dependency","value":"std::vec::Vec<i32>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n","sig":null,"attributes":[{"value":"prost(int32, repeated, packed = \"false\", tag = \"11\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589987,"byte_end":7590038,"line_start":25,"line_end":25,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":62},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590183,"byte_end":7590195,"line_start":29,"line_end":29,"column_start":9,"column_end":21},"name":"message_type","qualname":"::FileDescriptorProto::message_type","value":"std::vec::Vec<DescriptorProto>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" All top-level definitions in this file.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590138,"byte_end":7590174,"line_start":28,"line_end":28,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":63},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590280,"byte_end":7590289,"line_start":31,"line_end":31,"column_start":9,"column_end":18},"name":"enum_type","qualname":"::FileDescriptorProto::enum_type","value":"std::vec::Vec<EnumDescriptorProto>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"5\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590235,"byte_end":7590271,"line_start":30,"line_end":30,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":64},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590378,"byte_end":7590385,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"name":"service","qualname":"::FileDescriptorProto::service","value":"std::vec::Vec<ServiceDescriptorProto>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590333,"byte_end":7590369,"line_start":32,"line_end":32,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":65},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590477,"byte_end":7590486,"line_start":35,"line_end":35,"column_start":9,"column_end":18},"name":"extension","qualname":"::FileDescriptorProto::extension","value":"std::vec::Vec<FieldDescriptorProto>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"7\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590432,"byte_end":7590468,"line_start":34,"line_end":34,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":66},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590576,"byte_end":7590583,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"name":"options","qualname":"::FileDescriptorProto::options","value":"std::option::Option<FileOptions>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590531,"byte_end":7590567,"line_start":36,"line_end":36,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":67},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590928,"byte_end":7590944,"line_start":43,"line_end":43,"column_start":9,"column_end":25},"name":"source_code_info","qualname":"::FileDescriptorProto::source_code_info","value":"std::option::Option<SourceCodeInfo>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" This field contains optional information about the original source code.\n You may safely remove this entire field without harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"9\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7590883,"byte_end":7590919,"line_start":42,"line_end":42,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":68},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591128,"byte_end":7591134,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"syntax","qualname":"::FileDescriptorProto::syntax","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" The syntax of the proto file.\n The supported values are \"proto2\" and \"proto3\".\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"12\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591083,"byte_end":7591119,"line_start":46,"line_end":46,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589349,"byte_end":7589353,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"name","qualname":"<FileDescriptorProto>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7589483,"byte_end":7589490,"line_start":16,"line_end":16,"column_start":9,"column_end":16},"name":"package","qualname":"<FileDescriptorProto>::package","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591128,"byte_end":7591134,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"syntax","qualname":"<FileDescriptorProto>::syntax","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":166},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591269,"byte_end":7591284,"line_start":51,"line_end":51,"column_start":12,"column_end":27},"name":"DescriptorProto","qualname":"::DescriptorProto","value":"DescriptorProto { name, field, extension, nested_type, enum_type, extension_range, oneof_decl, options, reserved_range, reserved_name }","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"decl_id":null,"docs":" Describes a message type.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":167},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591335,"byte_end":7591339,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"name":"name","qualname":"::DescriptorProto::name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591291,"byte_end":7591326,"line_start":52,"line_end":52,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":168},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591434,"byte_end":7591439,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"field","qualname":"::DescriptorProto::field","value":"std::vec::Vec<FieldDescriptorProto>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591389,"byte_end":7591425,"line_start":54,"line_end":54,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":169},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591529,"byte_end":7591538,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"name":"extension","qualname":"::DescriptorProto::extension","value":"std::vec::Vec<FieldDescriptorProto>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591484,"byte_end":7591520,"line_start":56,"line_end":56,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":170},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591628,"byte_end":7591639,"line_start":59,"line_end":59,"column_start":9,"column_end":20},"name":"nested_type","qualname":"::DescriptorProto::nested_type","value":"std::vec::Vec<DescriptorProto>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591583,"byte_end":7591619,"line_start":58,"line_end":58,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":171},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591724,"byte_end":7591733,"line_start":61,"line_end":61,"column_start":9,"column_end":18},"name":"enum_type","qualname":"::DescriptorProto::enum_type","value":"std::vec::Vec<EnumDescriptorProto>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591679,"byte_end":7591715,"line_start":60,"line_end":60,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":172},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591822,"byte_end":7591837,"line_start":63,"line_end":63,"column_start":9,"column_end":24},"name":"extension_range","qualname":"::DescriptorProto::extension_range","value":"std::vec::Vec<descriptor_proto::ExtensionRange>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"5\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591777,"byte_end":7591813,"line_start":62,"line_end":62,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":173},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591939,"byte_end":7591949,"line_start":65,"line_end":65,"column_start":9,"column_end":19},"name":"oneof_decl","qualname":"::DescriptorProto::oneof_decl","value":"std::vec::Vec<OneofDescriptorProto>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591894,"byte_end":7591930,"line_start":64,"line_end":64,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":174},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592039,"byte_end":7592046,"line_start":67,"line_end":67,"column_start":9,"column_end":16},"name":"options","qualname":"::DescriptorProto::options","value":"std::option::Option<MessageOptions>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"7\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591994,"byte_end":7592030,"line_start":66,"line_end":66,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":175},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592136,"byte_end":7592150,"line_start":69,"line_end":69,"column_start":9,"column_end":23},"name":"reserved_range","qualname":"::DescriptorProto::reserved_range","value":"std::vec::Vec<descriptor_proto::ReservedRange>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"9\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592091,"byte_end":7592127,"line_start":68,"line_end":68,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":176},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592382,"byte_end":7592395,"line_start":73,"line_end":73,"column_start":9,"column_end":22},"name":"reserved_name","qualname":"::DescriptorProto::reserved_name","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" Reserved field names, which may not be used by fields in the same message.\n A given name may only be reserved once.\n","sig":null,"attributes":[{"value":"prost(string, repeated, tag = \"10\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592337,"byte_end":7592373,"line_start":72,"line_end":72,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7591335,"byte_end":7591339,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"name":"name","qualname":"<DescriptorProto>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":20},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592445,"byte_end":7592461,"line_start":75,"line_end":75,"column_start":9,"column_end":25},"name":"descriptor_proto","qualname":"::descriptor_proto","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":282},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":235},{"krate":0,"index":284},{"krate":0,"index":332},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":287}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":231},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592529,"byte_end":7592543,"line_start":77,"line_end":77,"column_start":16,"column_end":30},"name":"ExtensionRange","qualname":"::descriptor_proto::ExtensionRange","value":"ExtensionRange { start, end, options }","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":232},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592601,"byte_end":7592606,"line_start":79,"line_end":79,"column_start":13,"column_end":18},"name":"start","qualname":"::descriptor_proto::ExtensionRange::start","value":"std::option::Option<i32>","parent":{"krate":0,"index":231},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592554,"byte_end":7592588,"line_start":78,"line_end":78,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":233},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592691,"byte_end":7592694,"line_start":81,"line_end":81,"column_start":13,"column_end":16},"name":"end","qualname":"::descriptor_proto::ExtensionRange::end","value":"std::option::Option<i32>","parent":{"krate":0,"index":231},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592644,"byte_end":7592678,"line_start":80,"line_end":80,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":234},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592781,"byte_end":7592788,"line_start":83,"line_end":83,"column_start":13,"column_end":20},"name":"options","qualname":"::descriptor_proto::ExtensionRange::options","value":"std::option::Option<ExtensionRangeOptions>","parent":{"krate":0,"index":231},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592732,"byte_end":7592768,"line_start":82,"line_end":82,"column_start":9,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592601,"byte_end":7592606,"line_start":79,"line_end":79,"column_start":13,"column_end":18},"name":"start","qualname":"<ExtensionRange>::start","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7592691,"byte_end":7592694,"line_start":81,"line_end":81,"column_start":13,"column_end":16},"name":"end","qualname":"<ExtensionRange>::end","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":284},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593090,"byte_end":7593103,"line_start":89,"line_end":89,"column_start":16,"column_end":29},"name":"ReservedRange","qualname":"::descriptor_proto::ReservedRange","value":"ReservedRange { start, end }","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"decl_id":null,"docs":" Range of reserved tag numbers. Reserved tag numbers may not be used by\n fields or extension ranges in the same message. Reserved ranges may\n not overlap.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":285},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593184,"byte_end":7593189,"line_start":92,"line_end":92,"column_start":13,"column_end":18},"name":"start","qualname":"::descriptor_proto::ReservedRange::start","value":"std::option::Option<i32>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Inclusive.\n","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593137,"byte_end":7593171,"line_start":91,"line_end":91,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":286},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593297,"byte_end":7593300,"line_start":95,"line_end":95,"column_start":13,"column_end":16},"name":"end","qualname":"::descriptor_proto::ReservedRange::end","value":"std::option::Option<i32>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Exclusive.\n","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593250,"byte_end":7593284,"line_start":94,"line_end":94,"column_start":9,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593184,"byte_end":7593189,"line_start":92,"line_end":92,"column_start":13,"column_end":18},"name":"start","qualname":"<ReservedRange>::start","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593297,"byte_end":7593300,"line_start":95,"line_end":95,"column_start":13,"column_end":16},"name":"end","qualname":"<ReservedRange>::end","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":334},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593395,"byte_end":7593416,"line_start":99,"line_end":99,"column_start":12,"column_end":33},"name":"ExtensionRangeOptions","qualname":"::ExtensionRangeOptions","value":"ExtensionRangeOptions { uninterpreted_option }","parent":null,"children":[{"krate":0,"index":335}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":335},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593542,"byte_end":7593562,"line_start":102,"line_end":102,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::ExtensionRangeOptions::uninterpreted_option","value":"std::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":334},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593495,"byte_end":7593533,"line_start":101,"line_end":101,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":359},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593701,"byte_end":7593721,"line_start":106,"line_end":106,"column_start":12,"column_end":32},"name":"FieldDescriptorProto","qualname":"::FieldDescriptorProto","value":"FieldDescriptorProto { name, number, label, r#type, type_name, extendee, default_value, oneof_index, json_name, options }","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"decl_id":null,"docs":" Describes a field within a message.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":360},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593772,"byte_end":7593776,"line_start":108,"line_end":108,"column_start":9,"column_end":13},"name":"name","qualname":"::FieldDescriptorProto::name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593728,"byte_end":7593763,"line_start":107,"line_end":107,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":361},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593869,"byte_end":7593875,"line_start":110,"line_end":110,"column_start":9,"column_end":15},"name":"number","qualname":"::FieldDescriptorProto::number","value":"std::option::Option<i32>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593826,"byte_end":7593860,"line_start":109,"line_end":109,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":362},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593990,"byte_end":7593995,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"name":"label","qualname":"::FieldDescriptorProto::label","value":"std::option::Option<i32>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(enumeration = \"field_descriptor_proto::Label\", optional, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593909,"byte_end":7593981,"line_start":111,"line_end":111,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":363},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7594264,"byte_end":7594270,"line_start":116,"line_end":116,"column_start":9,"column_end":15},"name":"r#type","qualname":"::FieldDescriptorProto::r#type","value":"std::option::Option<i32>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":" If type_name is set, this need not be set.  If both this and type_name\n are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.\n","sig":null,"attributes":[{"value":"prost(enumeration = \"field_descriptor_proto::Type\", optional, tag = \"5\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7594184,"byte_end":7594255,"line_start":115,"line_end":115,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":364},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7594679,"byte_end":7594688,"line_start":123,"line_end":123,"column_start":9,"column_end":18},"name":"type_name","qualname":"::FieldDescriptorProto::type_name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":" For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7594635,"byte_end":7594670,"line_start":122,"line_end":122,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":365},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7594908,"byte_end":7594916,"line_start":127,"line_end":127,"column_start":9,"column_end":17},"name":"extendee","qualname":"::FieldDescriptorProto::extendee","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":" For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7594864,"byte_end":7594899,"line_start":126,"line_end":126,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":366},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7595335,"byte_end":7595348,"line_start":134,"line_end":134,"column_start":9,"column_end":22},"name":"default_value","qualname":"::FieldDescriptorProto::default_value","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":" For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"7\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7595291,"byte_end":7595326,"line_start":133,"line_end":133,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":367},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7595573,"byte_end":7595584,"line_start":138,"line_end":138,"column_start":9,"column_end":20},"name":"oneof_index","qualname":"::FieldDescriptorProto::oneof_index","value":"std::option::Option<i32>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":" If set, gives the index of a oneof in the containing type's oneof_decl\n list.  This field is a member of that oneof.\n","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"9\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7595530,"byte_end":7595564,"line_start":137,"line_end":137,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":368},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7595926,"byte_end":7595935,"line_start":144,"line_end":144,"column_start":9,"column_end":18},"name":"json_name","qualname":"::FieldDescriptorProto::json_name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":" JSON name of this field. The value is set by protocol compiler. If the\n user has set a \"json_name\" option on this field, that option's value\n will be used. Otherwise, it's deduced from the field's name by converting\n it to camelCase.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"10\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7595881,"byte_end":7595917,"line_start":143,"line_end":143,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":369},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596030,"byte_end":7596037,"line_start":146,"line_end":146,"column_start":9,"column_end":16},"name":"options","qualname":"::FieldDescriptorProto::options","value":"std::option::Option<FieldOptions>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7595985,"byte_end":7596021,"line_start":145,"line_end":145,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593772,"byte_end":7593776,"line_start":108,"line_end":108,"column_start":9,"column_end":13},"name":"name","qualname":"<FieldDescriptorProto>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7594908,"byte_end":7594916,"line_start":127,"line_end":127,"column_start":9,"column_end":17},"name":"extendee","qualname":"<FieldDescriptorProto>::extendee","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593869,"byte_end":7593875,"line_start":110,"line_end":110,"column_start":9,"column_end":15},"name":"number","qualname":"<FieldDescriptorProto>::number","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7593990,"byte_end":7593995,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"name":"label","qualname":"<FieldDescriptorProto>::label","value":"fn (&self) -> super::field_descriptor_proto::Label","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7594264,"byte_end":7594270,"line_start":116,"line_end":116,"column_start":9,"column_end":15},"name":"type","qualname":"<FieldDescriptorProto>::type","value":"fn (&self) -> super::field_descriptor_proto::Type","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7594679,"byte_end":7594688,"line_start":123,"line_end":123,"column_start":9,"column_end":18},"name":"type_name","qualname":"<FieldDescriptorProto>::type_name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7595335,"byte_end":7595348,"line_start":134,"line_end":134,"column_start":9,"column_end":22},"name":"default_value","qualname":"<FieldDescriptorProto>::default_value","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7595573,"byte_end":7595584,"line_start":138,"line_end":138,"column_start":9,"column_end":20},"name":"oneof_index","qualname":"<FieldDescriptorProto>::oneof_index","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7595926,"byte_end":7595935,"line_start":144,"line_end":144,"column_start":9,"column_end":18},"name":"json_name","qualname":"<FieldDescriptorProto>::json_name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":21},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596086,"byte_end":7596108,"line_start":148,"line_end":148,"column_start":9,"column_end":31},"name":"field_descriptor_proto","qualname":"::field_descriptor_proto","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":595},{"krate":0,"index":594},{"krate":0,"index":592},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":583},{"krate":0,"index":581},{"krate":0,"index":579},{"krate":0,"index":570},{"krate":0,"index":597},{"krate":0,"index":632},{"krate":0,"index":631},{"krate":0,"index":629},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":620},{"krate":0,"index":618},{"krate":0,"index":616},{"krate":0,"index":607}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":516},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596339,"byte_end":7596345,"line_start":154,"line_end":154,"column_start":9,"column_end":15},"name":"Double","qualname":"::field_descriptor_proto::Type::Double","value":"Type::Double","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" 0 is reserved for errors.\n Order is weird for historical reasons.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":519},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596359,"byte_end":7596364,"line_start":155,"line_end":155,"column_start":9,"column_end":14},"name":"Float","qualname":"::field_descriptor_proto::Type::Float","value":"Type::Float","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":522},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596503,"byte_end":7596508,"line_start":158,"line_end":158,"column_start":9,"column_end":14},"name":"Int64","qualname":"::field_descriptor_proto::Type::Int64","value":"Type::Int64","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":525},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596522,"byte_end":7596528,"line_start":159,"line_end":159,"column_start":9,"column_end":15},"name":"Uint64","qualname":"::field_descriptor_proto::Type::Uint64","value":"Type::Uint64","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":528},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596667,"byte_end":7596672,"line_start":162,"line_end":162,"column_start":9,"column_end":14},"name":"Int32","qualname":"::field_descriptor_proto::Type::Int32","value":"Type::Int32","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":531},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596686,"byte_end":7596693,"line_start":163,"line_end":163,"column_start":9,"column_end":16},"name":"Fixed64","qualname":"::field_descriptor_proto::Type::Fixed64","value":"Type::Fixed64","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":534},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596707,"byte_end":7596714,"line_start":164,"line_end":164,"column_start":9,"column_end":16},"name":"Fixed32","qualname":"::field_descriptor_proto::Type::Fixed32","value":"Type::Fixed32","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":537},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596728,"byte_end":7596732,"line_start":165,"line_end":165,"column_start":9,"column_end":13},"name":"Bool","qualname":"::field_descriptor_proto::Type::Bool","value":"Type::Bool","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":540},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596746,"byte_end":7596752,"line_start":166,"line_end":166,"column_start":9,"column_end":15},"name":"String","qualname":"::field_descriptor_proto::Type::String","value":"Type::String","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":543},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597019,"byte_end":7597024,"line_start":171,"line_end":171,"column_start":9,"column_end":14},"name":"Group","qualname":"::field_descriptor_proto::Type::Group","value":"Type::Group","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Tag-delimited aggregate.\n Group type is deprecated and not supported in proto3. However, Proto3\n implementations should still be able to parse the group wire format and\n treat group fields as unknown fields.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":546},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597079,"byte_end":7597086,"line_start":173,"line_end":173,"column_start":9,"column_end":16},"name":"Message","qualname":"::field_descriptor_proto::Type::Message","value":"Type::Message","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Length-delimited aggregate.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":549},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597131,"byte_end":7597136,"line_start":175,"line_end":175,"column_start":9,"column_end":14},"name":"Bytes","qualname":"::field_descriptor_proto::Type::Bytes","value":"Type::Bytes","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" New in version 2.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":552},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597151,"byte_end":7597157,"line_start":176,"line_end":176,"column_start":9,"column_end":15},"name":"Uint32","qualname":"::field_descriptor_proto::Type::Uint32","value":"Type::Uint32","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":555},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597172,"byte_end":7597176,"line_start":177,"line_end":177,"column_start":9,"column_end":13},"name":"Enum","qualname":"::field_descriptor_proto::Type::Enum","value":"Type::Enum","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":558},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597191,"byte_end":7597199,"line_start":178,"line_end":178,"column_start":9,"column_end":17},"name":"Sfixed32","qualname":"::field_descriptor_proto::Type::Sfixed32","value":"Type::Sfixed32","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":561},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597214,"byte_end":7597222,"line_start":179,"line_end":179,"column_start":9,"column_end":17},"name":"Sfixed64","qualname":"::field_descriptor_proto::Type::Sfixed64","value":"Type::Sfixed64","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":564},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597271,"byte_end":7597277,"line_start":181,"line_end":181,"column_start":9,"column_end":15},"name":"Sint32","qualname":"::field_descriptor_proto::Type::Sint32","value":"Type::Sint32","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Uses ZigZag encoding.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":567},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597326,"byte_end":7597332,"line_start":183,"line_end":183,"column_start":9,"column_end":15},"name":"Sint64","qualname":"::field_descriptor_proto::Type::Sint64","value":"Type::Sint64","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Uses ZigZag encoding.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":515},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596235,"byte_end":7596239,"line_start":151,"line_end":151,"column_start":14,"column_end":18},"name":"Type","qualname":"::field_descriptor_proto::Type","value":"Type::{Double, Float, Int64, Uint64, Int32, Fixed64, Fixed32, Bool, String, Group, Message, Bytes, Uint32, Enum, Sfixed32, Sfixed64, Sint32, Sint64}","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":540},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":567}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7596209,"byte_end":7596221,"line_start":150,"line_end":150,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":598},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597522,"byte_end":7597530,"line_start":189,"line_end":189,"column_start":9,"column_end":17},"name":"Optional","qualname":"::field_descriptor_proto::Label::Optional","value":"Label::Optional","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" 0 is reserved for errors\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":601},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597544,"byte_end":7597552,"line_start":190,"line_end":190,"column_start":9,"column_end":17},"name":"Required","qualname":"::field_descriptor_proto::Label::Required","value":"Label::Required","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":604},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597566,"byte_end":7597574,"line_start":191,"line_end":191,"column_start":9,"column_end":17},"name":"Repeated","qualname":"::field_descriptor_proto::Label::Repeated","value":"Label::Repeated","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":597},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597469,"byte_end":7597474,"line_start":187,"line_end":187,"column_start":14,"column_end":19},"name":"Label","qualname":"::field_descriptor_proto::Label","value":"Label::{Optional, Required, Repeated}","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597443,"byte_end":7597455,"line_start":186,"line_end":186,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":634},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597668,"byte_end":7597688,"line_start":196,"line_end":196,"column_start":12,"column_end":32},"name":"OneofDescriptorProto","qualname":"::OneofDescriptorProto","value":"OneofDescriptorProto { name, options }","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":636}],"decl_id":null,"docs":" Describes a oneof.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":635},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597739,"byte_end":7597743,"line_start":198,"line_end":198,"column_start":9,"column_end":13},"name":"name","qualname":"::OneofDescriptorProto::name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597695,"byte_end":7597730,"line_start":197,"line_end":197,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":636},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597838,"byte_end":7597845,"line_start":200,"line_end":200,"column_start":9,"column_end":16},"name":"options","qualname":"::OneofDescriptorProto::options","value":"std::option::Option<OneofOptions>","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597793,"byte_end":7597829,"line_start":199,"line_end":199,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597739,"byte_end":7597743,"line_start":198,"line_end":198,"column_start":9,"column_end":13},"name":"name","qualname":"<OneofDescriptorProto>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":674},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597971,"byte_end":7597990,"line_start":204,"line_end":204,"column_start":12,"column_end":31},"name":"EnumDescriptorProto","qualname":"::EnumDescriptorProto","value":"EnumDescriptorProto { name, value, options, reserved_range, reserved_name }","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679}],"decl_id":null,"docs":" Describes an enum type.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":675},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598041,"byte_end":7598045,"line_start":206,"line_end":206,"column_start":9,"column_end":13},"name":"name","qualname":"::EnumDescriptorProto::name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7597997,"byte_end":7598032,"line_start":205,"line_end":205,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":676},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598140,"byte_end":7598145,"line_start":208,"line_end":208,"column_start":9,"column_end":14},"name":"value","qualname":"::EnumDescriptorProto::value","value":"std::vec::Vec<EnumValueDescriptorProto>","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598095,"byte_end":7598131,"line_start":207,"line_end":207,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":677},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598239,"byte_end":7598246,"line_start":210,"line_end":210,"column_start":9,"column_end":16},"name":"options","qualname":"::EnumDescriptorProto::options","value":"std::option::Option<EnumOptions>","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598194,"byte_end":7598230,"line_start":209,"line_end":209,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":678},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598509,"byte_end":7598523,"line_start":215,"line_end":215,"column_start":9,"column_end":23},"name":"reserved_range","qualname":"::EnumDescriptorProto::reserved_range","value":"std::vec::Vec<enum_descriptor_proto::EnumReservedRange>","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":" Range of reserved numeric values. Reserved numeric values may not be used\n by enum values in the same enum declaration. Reserved ranges may not\n overlap.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598464,"byte_end":7598500,"line_start":214,"line_end":214,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":679},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598740,"byte_end":7598753,"line_start":219,"line_end":219,"column_start":9,"column_end":22},"name":"reserved_name","qualname":"::EnumDescriptorProto::reserved_name","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":" Reserved enum value names, which may not be reused. A given name may only\n be reserved once.\n","sig":null,"attributes":[{"value":"prost(string, repeated, tag = \"5\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598696,"byte_end":7598731,"line_start":218,"line_end":218,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598041,"byte_end":7598045,"line_start":206,"line_end":206,"column_start":9,"column_end":13},"name":"name","qualname":"<EnumDescriptorProto>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":22},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7598803,"byte_end":7598824,"line_start":221,"line_end":221,"column_start":9,"column_end":30},"name":"enum_descriptor_proto","qualname":"::enum_descriptor_proto","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":777},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":732}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":729},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599220,"byte_end":7599237,"line_start":229,"line_end":229,"column_start":16,"column_end":33},"name":"EnumReservedRange","qualname":"::enum_descriptor_proto::EnumReservedRange","value":"EnumReservedRange { start, end }","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731}],"decl_id":null,"docs":" Range of reserved numeric values. Reserved values may not be used by\n entries in the same enum. Reserved ranges may not overlap.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":730},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599318,"byte_end":7599323,"line_start":232,"line_end":232,"column_start":13,"column_end":18},"name":"start","qualname":"::enum_descriptor_proto::EnumReservedRange::start","value":"std::option::Option<i32>","parent":{"krate":0,"index":729},"children":[],"decl_id":null,"docs":" Inclusive.\n","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599271,"byte_end":7599305,"line_start":231,"line_end":231,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":731},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599431,"byte_end":7599434,"line_start":235,"line_end":235,"column_start":13,"column_end":16},"name":"end","qualname":"::enum_descriptor_proto::EnumReservedRange::end","value":"std::option::Option<i32>","parent":{"krate":0,"index":729},"children":[],"decl_id":null,"docs":" Inclusive.\n","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599384,"byte_end":7599418,"line_start":234,"line_end":234,"column_start":9,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599318,"byte_end":7599323,"line_start":232,"line_end":232,"column_start":13,"column_end":18},"name":"start","qualname":"<EnumReservedRange>::start","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599431,"byte_end":7599434,"line_start":235,"line_end":235,"column_start":13,"column_end":16},"name":"end","qualname":"<EnumReservedRange>::end","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":779},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599567,"byte_end":7599591,"line_start":240,"line_end":240,"column_start":12,"column_end":36},"name":"EnumValueDescriptorProto","qualname":"::EnumValueDescriptorProto","value":"EnumValueDescriptorProto { name, number, options }","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782}],"decl_id":null,"docs":" Describes a value within an enum.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":780},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599642,"byte_end":7599646,"line_start":242,"line_end":242,"column_start":9,"column_end":13},"name":"name","qualname":"::EnumValueDescriptorProto::name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":779},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599598,"byte_end":7599633,"line_start":241,"line_end":241,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":781},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599739,"byte_end":7599745,"line_start":244,"line_end":244,"column_start":9,"column_end":15},"name":"number","qualname":"::EnumValueDescriptorProto::number","value":"std::option::Option<i32>","parent":{"krate":0,"index":779},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599696,"byte_end":7599730,"line_start":243,"line_end":243,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":782},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599824,"byte_end":7599831,"line_start":246,"line_end":246,"column_start":9,"column_end":16},"name":"options","qualname":"::EnumValueDescriptorProto::options","value":"std::option::Option<EnumValueOptions>","parent":{"krate":0,"index":779},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599779,"byte_end":7599815,"line_start":245,"line_end":245,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599642,"byte_end":7599646,"line_start":242,"line_end":242,"column_start":9,"column_end":13},"name":"name","qualname":"<EnumValueDescriptorProto>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599739,"byte_end":7599745,"line_start":244,"line_end":244,"column_start":9,"column_end":15},"name":"number","qualname":"<EnumValueDescriptorProto>::number","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":832},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599958,"byte_end":7599980,"line_start":250,"line_end":250,"column_start":12,"column_end":34},"name":"ServiceDescriptorProto","qualname":"::ServiceDescriptorProto","value":"ServiceDescriptorProto { name, method, options }","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835}],"decl_id":null,"docs":" Describes a service.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":833},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600031,"byte_end":7600035,"line_start":252,"line_end":252,"column_start":9,"column_end":13},"name":"name","qualname":"::ServiceDescriptorProto::name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":832},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7599987,"byte_end":7600022,"line_start":251,"line_end":251,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":834},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600130,"byte_end":7600136,"line_start":254,"line_end":254,"column_start":9,"column_end":15},"name":"method","qualname":"::ServiceDescriptorProto::method","value":"std::vec::Vec<MethodDescriptorProto>","parent":{"krate":0,"index":832},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600085,"byte_end":7600121,"line_start":253,"line_end":253,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":835},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600227,"byte_end":7600234,"line_start":256,"line_end":256,"column_start":9,"column_end":16},"name":"options","qualname":"::ServiceDescriptorProto::options","value":"std::option::Option<ServiceOptions>","parent":{"krate":0,"index":832},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600182,"byte_end":7600218,"line_start":255,"line_end":255,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600031,"byte_end":7600035,"line_start":252,"line_end":252,"column_start":9,"column_end":13},"name":"name","qualname":"<ServiceDescriptorProto>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":874},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600371,"byte_end":7600392,"line_start":260,"line_end":260,"column_start":12,"column_end":33},"name":"MethodDescriptorProto","qualname":"::MethodDescriptorProto","value":"MethodDescriptorProto { name, input_type, output_type, options, client_streaming, server_streaming }","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880}],"decl_id":null,"docs":" Describes a method of a service.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":875},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600443,"byte_end":7600447,"line_start":262,"line_end":262,"column_start":9,"column_end":13},"name":"name","qualname":"::MethodDescriptorProto::name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600399,"byte_end":7600434,"line_start":261,"line_end":261,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":876},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600691,"byte_end":7600701,"line_start":266,"line_end":266,"column_start":9,"column_end":19},"name":"input_type","qualname":"::MethodDescriptorProto::input_type","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600647,"byte_end":7600682,"line_start":265,"line_end":265,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":877},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600795,"byte_end":7600806,"line_start":268,"line_end":268,"column_start":9,"column_end":20},"name":"output_type","qualname":"::MethodDescriptorProto::output_type","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600751,"byte_end":7600786,"line_start":267,"line_end":267,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":878},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600901,"byte_end":7600908,"line_start":270,"line_end":270,"column_start":9,"column_end":16},"name":"options","qualname":"::MethodDescriptorProto::options","value":"std::option::Option<MethodOptions>","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600856,"byte_end":7600892,"line_start":269,"line_end":269,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":879},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7601073,"byte_end":7601089,"line_start":273,"line_end":273,"column_start":9,"column_end":25},"name":"client_streaming","qualname":"::MethodDescriptorProto::client_streaming","value":"std::option::Option<bool>","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" Identifies if client streams multiple client messages\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"5\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7601014,"byte_end":7601064,"line_start":272,"line_end":272,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":880},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7601245,"byte_end":7601261,"line_start":276,"line_end":276,"column_start":9,"column_end":25},"name":"server_streaming","qualname":"::MethodDescriptorProto::server_streaming","value":"std::option::Option<bool>","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" Identifies if server streams multiple server messages\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"6\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7601186,"byte_end":7601236,"line_start":275,"line_end":275,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600443,"byte_end":7600447,"line_start":262,"line_end":262,"column_start":9,"column_end":13},"name":"name","qualname":"<MethodDescriptorProto>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600691,"byte_end":7600701,"line_start":266,"line_end":266,"column_start":9,"column_end":19},"name":"input_type","qualname":"<MethodDescriptorProto>::input_type","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7600795,"byte_end":7600806,"line_start":268,"line_end":268,"column_start":9,"column_end":20},"name":"output_type","qualname":"<MethodDescriptorProto>::output_type","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7601073,"byte_end":7601089,"line_start":273,"line_end":273,"column_start":9,"column_end":25},"name":"client_streaming","qualname":"<MethodDescriptorProto>::client_streaming","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7601245,"byte_end":7601261,"line_start":276,"line_end":276,"column_start":9,"column_end":25},"name":"server_streaming","qualname":"<MethodDescriptorProto>::server_streaming","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":966},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7603235,"byte_end":7603246,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"FileOptions","qualname":"::FileOptions","value":"FileOptions { java_package, java_outer_classname, java_multiple_files, java_generate_equals_and_hash, java_string_check_utf8, optimize_for, go_package, cc_generic_services, java_generic_services, py_generic_services, php_generic_services, deprecated, cc_enable_arenas, objc_class_prefix, csharp_namespace, swift_prefix, php_class_prefix, php_namespace, php_metadata_namespace, ruby_package, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":967},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7603554,"byte_end":7603566,"line_start":317,"line_end":317,"column_start":9,"column_end":21},"name":"java_package","qualname":"::FileOptions::java_package","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7603510,"byte_end":7603545,"line_start":316,"line_end":316,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":968},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7603999,"byte_end":7604019,"line_start":324,"line_end":324,"column_start":9,"column_end":29},"name":"java_outer_classname","qualname":"::FileOptions::java_outer_classname","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7603955,"byte_end":7603990,"line_start":323,"line_end":323,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":969},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7604575,"byte_end":7604594,"line_start":332,"line_end":332,"column_start":9,"column_end":28},"name":"java_multiple_files","qualname":"::FileOptions::java_multiple_files","value":"std::option::Option<bool>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"10\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7604515,"byte_end":7604566,"line_start":331,"line_end":331,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":970},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7604706,"byte_end":7604735,"line_start":335,"line_end":335,"column_start":9,"column_end":38},"name":"java_generate_equals_and_hash","qualname":"::FileOptions::java_generate_equals_and_hash","value":"std::option::Option<bool>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" This option does nothing.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"20\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7604663,"byte_end":7604697,"line_start":334,"line_end":334,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":971},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7605215,"byte_end":7605237,"line_start":343,"line_end":343,"column_start":9,"column_end":31},"name":"java_string_check_utf8","qualname":"::FileOptions::java_string_check_utf8","value":"std::option::Option<bool>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" If set true, then the Java2 code generator will generate code that\n throws an exception whenever an attempt is made to assign a non-UTF-8\n byte sequence to a string field.\n Message reflection will do the same.\n However, an extension field still accepts non-UTF-8 byte sequences.\n This option has no effect on when used with the lite runtime.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"27\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7605155,"byte_end":7605206,"line_start":342,"line_end":342,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":972},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7605367,"byte_end":7605379,"line_start":345,"line_end":345,"column_start":9,"column_end":21},"name":"optimize_for","qualname":"::FileOptions::optimize_for","value":"std::option::Option<i32>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(enumeration = \"file_options::OptimizeMode\", optional, tag = \"9\",\n        default = \"Speed\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7605272,"byte_end":7605358,"line_start":344,"line_end":344,"column_start":5,"column_end":91}}]},{"kind":"Field","id":{"krate":0,"index":973},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7605832,"byte_end":7605842,"line_start":352,"line_end":352,"column_start":9,"column_end":19},"name":"go_package","qualname":"::FileOptions::go_package","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Sets the Go package where structs generated from this .proto will be\n placed. If omitted, the Go package will be derived from the following:\n   - The basename of the package import path, if provided.\n   - Otherwise, the package statement in the .proto file, if present.\n   - Otherwise, the basename of the .proto file, without extension.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"11\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7605787,"byte_end":7605823,"line_start":351,"line_end":351,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":974},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606603,"byte_end":7606622,"line_start":364,"line_end":364,"column_start":9,"column_end":28},"name":"cc_generic_services","qualname":"::FileOptions::cc_generic_services","value":"std::option::Option<bool>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of google.protobuf.","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"16\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606543,"byte_end":7606594,"line_start":363,"line_end":363,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":975},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606717,"byte_end":7606738,"line_start":366,"line_end":366,"column_start":9,"column_end":30},"name":"java_generic_services","qualname":"::FileOptions::java_generic_services","value":"std::option::Option<bool>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"17\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606657,"byte_end":7606708,"line_start":365,"line_end":365,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":976},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606833,"byte_end":7606852,"line_start":368,"line_end":368,"column_start":9,"column_end":28},"name":"py_generic_services","qualname":"::FileOptions::py_generic_services","value":"std::option::Option<bool>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"18\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606773,"byte_end":7606824,"line_start":367,"line_end":367,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":977},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606947,"byte_end":7606967,"line_start":370,"line_end":370,"column_start":9,"column_end":29},"name":"php_generic_services","qualname":"::FileOptions::php_generic_services","value":"std::option::Option<bool>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"42\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606887,"byte_end":7606938,"line_start":369,"line_end":369,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":978},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607318,"byte_end":7607328,"line_start":376,"line_end":376,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::FileOptions::deprecated","value":"std::option::Option<bool>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Is this file deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for everything in the file, or it will be completely ignored; in the very\n least, this is a formalization for deprecating files.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"23\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607258,"byte_end":7607309,"line_start":375,"line_end":375,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":979},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607550,"byte_end":7607566,"line_start":380,"line_end":380,"column_start":9,"column_end":25},"name":"cc_enable_arenas","qualname":"::FileOptions::cc_enable_arenas","value":"std::option::Option<bool>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Enables the use of arenas for the proto messages in this file. This applies\n only to generated classes for C++.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"31\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607490,"byte_end":7607541,"line_start":379,"line_end":379,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":980},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607791,"byte_end":7607808,"line_start":384,"line_end":384,"column_start":9,"column_end":26},"name":"objc_class_prefix","qualname":"::FileOptions::objc_class_prefix","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Sets the objective c class prefix which is prepended to all objective c\n generated classes from this .proto. There is no default.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"36\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607746,"byte_end":7607782,"line_start":383,"line_end":383,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":981},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607969,"byte_end":7607985,"line_start":387,"line_end":387,"column_start":9,"column_end":25},"name":"csharp_namespace","qualname":"::FileOptions::csharp_namespace","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Namespace for generated classes; defaults to the package.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"37\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607924,"byte_end":7607960,"line_start":386,"line_end":386,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":982},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7608366,"byte_end":7608378,"line_start":393,"line_end":393,"column_start":9,"column_end":21},"name":"swift_prefix","qualname":"::FileOptions::swift_prefix","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" By default Swift generators will take the proto package and CamelCase it\n replacing '.' with underscore and use that to prefix the types/symbols\n defined. When this options is provided, they will use this value instead\n to prefix the types/symbols defined.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"39\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7608321,"byte_end":7608357,"line_start":392,"line_end":392,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":983},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7608599,"byte_end":7608615,"line_start":397,"line_end":397,"column_start":9,"column_end":25},"name":"php_class_prefix","qualname":"::FileOptions::php_class_prefix","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Sets the php class prefix which is prepended to all php generated classes\n from this .proto. Default is empty.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"40\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7608554,"byte_end":7608590,"line_start":396,"line_end":396,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":984},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7608906,"byte_end":7608919,"line_start":402,"line_end":402,"column_start":9,"column_end":22},"name":"php_namespace","qualname":"::FileOptions::php_namespace","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Use this option to change the namespace of php generated classes. Default\n is empty. When this option is empty, the package name will be used for\n determining the namespace.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"41\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7608861,"byte_end":7608897,"line_start":401,"line_end":401,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":985},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7609222,"byte_end":7609244,"line_start":407,"line_end":407,"column_start":9,"column_end":31},"name":"php_metadata_namespace","qualname":"::FileOptions::php_metadata_namespace","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Use this option to change the namespace of php generated metadata classes.\n Default is empty. When this option is empty, the proto file name will be used\n for determining the namespace.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"44\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7609177,"byte_end":7609213,"line_start":406,"line_end":406,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":986},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7609539,"byte_end":7609551,"line_start":412,"line_end":412,"column_start":9,"column_end":21},"name":"ruby_package","qualname":"::FileOptions::ruby_package","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" Use this option to change the package of ruby generated classes. Default\n is empty. When this option is not set, the package name will be used for\n determining the ruby package.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"45\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7609494,"byte_end":7609530,"line_start":411,"line_end":411,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":987},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7609772,"byte_end":7609792,"line_start":416,"line_end":416,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::FileOptions::uninterpreted_option","value":"std::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here.\n See the documentation for the \"Options\" section above.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7609725,"byte_end":7609763,"line_start":415,"line_end":415,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7603554,"byte_end":7603566,"line_start":317,"line_end":317,"column_start":9,"column_end":21},"name":"java_package","qualname":"<FileOptions>::java_package","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7603999,"byte_end":7604019,"line_start":324,"line_end":324,"column_start":9,"column_end":29},"name":"java_outer_classname","qualname":"<FileOptions>::java_outer_classname","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7605367,"byte_end":7605379,"line_start":345,"line_end":345,"column_start":9,"column_end":21},"name":"optimize_for","qualname":"<FileOptions>::optimize_for","value":"fn (&self) -> super::file_options::OptimizeMode","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7604575,"byte_end":7604594,"line_start":332,"line_end":332,"column_start":9,"column_end":28},"name":"java_multiple_files","qualname":"<FileOptions>::java_multiple_files","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7605832,"byte_end":7605842,"line_start":352,"line_end":352,"column_start":9,"column_end":19},"name":"go_package","qualname":"<FileOptions>::go_package","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606603,"byte_end":7606622,"line_start":364,"line_end":364,"column_start":9,"column_end":28},"name":"cc_generic_services","qualname":"<FileOptions>::cc_generic_services","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606717,"byte_end":7606738,"line_start":366,"line_end":366,"column_start":9,"column_end":30},"name":"java_generic_services","qualname":"<FileOptions>::java_generic_services","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606833,"byte_end":7606852,"line_start":368,"line_end":368,"column_start":9,"column_end":28},"name":"py_generic_services","qualname":"<FileOptions>::py_generic_services","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7604706,"byte_end":7604735,"line_start":335,"line_end":335,"column_start":9,"column_end":38},"name":"java_generate_equals_and_hash","qualname":"<FileOptions>::java_generate_equals_and_hash","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607318,"byte_end":7607328,"line_start":376,"line_end":376,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<FileOptions>::deprecated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7605215,"byte_end":7605237,"line_start":343,"line_end":343,"column_start":9,"column_end":31},"name":"java_string_check_utf8","qualname":"<FileOptions>::java_string_check_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607550,"byte_end":7607566,"line_start":380,"line_end":380,"column_start":9,"column_end":25},"name":"cc_enable_arenas","qualname":"<FileOptions>::cc_enable_arenas","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607791,"byte_end":7607808,"line_start":384,"line_end":384,"column_start":9,"column_end":26},"name":"objc_class_prefix","qualname":"<FileOptions>::objc_class_prefix","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7607969,"byte_end":7607985,"line_start":387,"line_end":387,"column_start":9,"column_end":25},"name":"csharp_namespace","qualname":"<FileOptions>::csharp_namespace","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7608366,"byte_end":7608378,"line_start":393,"line_end":393,"column_start":9,"column_end":21},"name":"swift_prefix","qualname":"<FileOptions>::swift_prefix","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7608599,"byte_end":7608615,"line_start":397,"line_end":397,"column_start":9,"column_end":25},"name":"php_class_prefix","qualname":"<FileOptions>::php_class_prefix","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7608906,"byte_end":7608919,"line_start":402,"line_end":402,"column_start":9,"column_end":22},"name":"php_namespace","qualname":"<FileOptions>::php_namespace","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7606947,"byte_end":7606967,"line_start":370,"line_end":370,"column_start":9,"column_end":29},"name":"php_generic_services","qualname":"<FileOptions>::php_generic_services","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7609222,"byte_end":7609244,"line_start":407,"line_end":407,"column_start":9,"column_end":31},"name":"php_metadata_namespace","qualname":"<FileOptions>::php_metadata_namespace","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7609539,"byte_end":7609551,"line_start":412,"line_end":412,"column_start":9,"column_end":21},"name":"ruby_package","qualname":"<FileOptions>::ruby_package","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":23},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7609842,"byte_end":7609854,"line_start":418,"line_end":418,"column_start":9,"column_end":21},"name":"file_options","qualname":"::file_options","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1293},{"krate":0,"index":1292},{"krate":0,"index":1290},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1281},{"krate":0,"index":1279},{"krate":0,"index":1277},{"krate":0,"index":1268}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7610134,"byte_end":7610139,"line_start":424,"line_end":424,"column_start":9,"column_end":14},"name":"Speed","qualname":"::file_options::OptimizeMode::Speed","value":"OptimizeMode::Speed","parent":{"krate":0,"index":1258},"children":[],"decl_id":null,"docs":" Generate complete code for parsing, serialization,\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1262},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7610240,"byte_end":7610248,"line_start":428,"line_end":428,"column_start":9,"column_end":17},"name":"CodeSize","qualname":"::file_options::OptimizeMode::CodeSize","value":"OptimizeMode::CodeSize","parent":{"krate":0,"index":1258},"children":[],"decl_id":null,"docs":" etc.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1265},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7610328,"byte_end":7610339,"line_start":430,"line_end":430,"column_start":9,"column_end":20},"name":"LiteRuntime","qualname":"::file_options::OptimizeMode::LiteRuntime","value":"OptimizeMode::LiteRuntime","parent":{"krate":0,"index":1258},"children":[],"decl_id":null,"docs":" Generate code using MessageLite and the lite runtime.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1258},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7610048,"byte_end":7610060,"line_start":422,"line_end":422,"column_start":14,"column_end":26},"name":"OptimizeMode","qualname":"::file_options::OptimizeMode","value":"OptimizeMode::{Speed, CodeSize, LiteRuntime}","parent":null,"children":[{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1265}],"decl_id":null,"docs":" Generated classes can be optimized for speed or code size.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7610022,"byte_end":7610034,"line_start":421,"line_end":421,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1295},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7610410,"byte_end":7610424,"line_start":434,"line_end":434,"column_start":12,"column_end":26},"name":"MessageOptions","qualname":"::MessageOptions","value":"MessageOptions { message_set_wire_format, no_standard_descriptor_accessor, deprecated, map_entry, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1296},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7611329,"byte_end":7611352,"line_start":454,"line_end":454,"column_start":9,"column_end":32},"name":"message_set_wire_format","qualname":"::MessageOptions::message_set_wire_format","value":"std::option::Option<bool>","parent":{"krate":0,"index":1295},"children":[],"decl_id":null,"docs":" Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"1\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7611270,"byte_end":7611320,"line_start":453,"line_end":453,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1297},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7611687,"byte_end":7611718,"line_start":459,"line_end":459,"column_start":9,"column_end":40},"name":"no_standard_descriptor_accessor","qualname":"::MessageOptions::no_standard_descriptor_accessor","value":"std::option::Option<bool>","parent":{"krate":0,"index":1295},"children":[],"decl_id":null,"docs":" Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"2\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7611628,"byte_end":7611678,"line_start":458,"line_end":458,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1298},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7612063,"byte_end":7612073,"line_start":465,"line_end":465,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::MessageOptions::deprecated","value":"std::option::Option<bool>","parent":{"krate":0,"index":1295},"children":[],"decl_id":null,"docs":" Is this message deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the message, or it will be completely ignored; in the very least,\n this is a formalization for deprecating messages.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"3\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7612004,"byte_end":7612054,"line_start":464,"line_end":464,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1299},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7613080,"byte_end":7613089,"line_start":488,"line_end":488,"column_start":9,"column_end":18},"name":"map_entry","qualname":"::MessageOptions::map_entry","value":"std::option::Option<bool>","parent":{"krate":0,"index":1295},"children":[],"decl_id":null,"docs":" Whether the message is an automatically generated map entry type for the\n maps field.","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"7\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7613038,"byte_end":7613071,"line_start":487,"line_end":487,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1300},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7613243,"byte_end":7613263,"line_start":491,"line_end":491,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::MessageOptions::uninterpreted_option","value":"std::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1295},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7613196,"byte_end":7613234,"line_start":490,"line_end":490,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7611329,"byte_end":7611352,"line_start":454,"line_end":454,"column_start":9,"column_end":32},"name":"message_set_wire_format","qualname":"<MessageOptions>::message_set_wire_format","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7611687,"byte_end":7611718,"line_start":459,"line_end":459,"column_start":9,"column_end":40},"name":"no_standard_descriptor_accessor","qualname":"<MessageOptions>::no_standard_descriptor_accessor","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7612063,"byte_end":7612073,"line_start":465,"line_end":465,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<MessageOptions>::deprecated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7613080,"byte_end":7613089,"line_start":488,"line_end":488,"column_start":9,"column_end":18},"name":"map_entry","qualname":"<MessageOptions>::map_entry","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1373},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7613362,"byte_end":7613374,"line_start":494,"line_end":494,"column_start":12,"column_end":24},"name":"FieldOptions","qualname":"::FieldOptions","value":"FieldOptions { ctype, packed, jstype, lazy, deprecated, weak, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1374},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7613775,"byte_end":7613780,"line_start":500,"line_end":500,"column_start":9,"column_end":14},"name":"ctype","qualname":"::FieldOptions::ctype","value":"std::option::Option<i32>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n","sig":null,"attributes":[{"value":"prost(enumeration = \"field_options::CType\", optional, tag = \"1\", default =\n        \"String\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7613685,"byte_end":7613766,"line_start":499,"line_end":499,"column_start":5,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":1375},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7614222,"byte_end":7614228,"line_start":507,"line_end":507,"column_start":9,"column_end":15},"name":"packed","qualname":"::FieldOptions::packed","value":"std::option::Option<bool>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob. In proto3, only explicit setting it to\n false will avoid using packed encoding.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7614180,"byte_end":7614213,"line_start":506,"line_end":506,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1376},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7615084,"byte_end":7615090,"line_start":520,"line_end":520,"column_start":9,"column_end":15},"name":"jstype","qualname":"::FieldOptions::jstype","value":"std::option::Option<i32>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" The jstype option determines the JavaScript type used for values of the\n field.  The option is permitted only for 64 bit integral and fixed types\n (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING\n is represented as JavaScript string, which avoids loss of precision that\n can happen when a large value is converted to a floating point JavaScript.\n Specifying JS_NUMBER for the jstype causes the generated JavaScript code to\n use the JavaScript \"number\" type.  The behavior of the default option\n JS_NORMAL is implementation dependent.","sig":null,"attributes":[{"value":"prost(enumeration = \"field_options::JsType\", optional, tag = \"6\", default =\n        \"JsNormal\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7614991,"byte_end":7615075,"line_start":519,"line_end":519,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1377},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617011,"byte_end":7617015,"line_start":550,"line_end":550,"column_start":9,"column_end":13},"name":"lazy","qualname":"::FieldOptions::lazy","value":"std::option::Option<bool>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"5\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7616952,"byte_end":7617002,"line_start":549,"line_end":549,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1378},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617354,"byte_end":7617364,"line_start":556,"line_end":556,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::FieldOptions::deprecated","value":"std::option::Option<bool>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"3\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617295,"byte_end":7617345,"line_start":555,"line_end":555,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1379},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617515,"byte_end":7617519,"line_start":559,"line_end":559,"column_start":9,"column_end":13},"name":"weak","qualname":"::FieldOptions::weak","value":"std::option::Option<bool>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" For Google-internal migration only. Do not use.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"10\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617455,"byte_end":7617506,"line_start":558,"line_end":558,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1380},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617673,"byte_end":7617693,"line_start":562,"line_end":562,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::FieldOptions::uninterpreted_option","value":"std::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617626,"byte_end":7617664,"line_start":561,"line_end":561,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1475},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7613775,"byte_end":7613780,"line_start":500,"line_end":500,"column_start":9,"column_end":14},"name":"ctype","qualname":"<FieldOptions>::ctype","value":"fn (&self) -> super::field_options::CType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7614222,"byte_end":7614228,"line_start":507,"line_end":507,"column_start":9,"column_end":15},"name":"packed","qualname":"<FieldOptions>::packed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617354,"byte_end":7617364,"line_start":556,"line_end":556,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<FieldOptions>::deprecated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617011,"byte_end":7617015,"line_start":550,"line_end":550,"column_start":9,"column_end":13},"name":"lazy","qualname":"<FieldOptions>::lazy","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7615084,"byte_end":7615090,"line_start":520,"line_end":520,"column_start":9,"column_end":15},"name":"jstype","qualname":"<FieldOptions>::jstype","value":"fn (&self) -> super::field_options::JsType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617515,"byte_end":7617519,"line_start":559,"line_end":559,"column_start":9,"column_end":13},"name":"weak","qualname":"<FieldOptions>::weak","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":24},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617743,"byte_end":7617756,"line_start":564,"line_end":564,"column_start":9,"column_end":22},"name":"field_options","qualname":"::field_options","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1489},{"krate":0,"index":1524},{"krate":0,"index":1523},{"krate":0,"index":1521},{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1512},{"krate":0,"index":1510},{"krate":0,"index":1508},{"krate":0,"index":1499},{"krate":0,"index":1526},{"krate":0,"index":1561},{"krate":0,"index":1560},{"krate":0,"index":1558},{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1549},{"krate":0,"index":1547},{"krate":0,"index":1545},{"krate":0,"index":1536}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1490},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617925,"byte_end":7617931,"line_start":569,"line_end":569,"column_start":9,"column_end":15},"name":"String","qualname":"::field_options::CType::String","value":"CType::String","parent":{"krate":0,"index":1489},"children":[],"decl_id":null,"docs":" Default mode.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1493},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617945,"byte_end":7617949,"line_start":570,"line_end":570,"column_start":9,"column_end":13},"name":"Cord","qualname":"::field_options::CType::Cord","value":"CType::Cord","parent":{"krate":0,"index":1489},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1496},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617963,"byte_end":7617974,"line_start":571,"line_end":571,"column_start":9,"column_end":20},"name":"StringPiece","qualname":"::field_options::CType::StringPiece","value":"CType::StringPiece","parent":{"krate":0,"index":1489},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1489},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617883,"byte_end":7617888,"line_start":567,"line_end":567,"column_start":14,"column_end":19},"name":"CType","qualname":"::field_options::CType","value":"CType::{String, Cord, StringPiece}","parent":null,"children":[{"krate":0,"index":1490},{"krate":0,"index":1493},{"krate":0,"index":1496}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7617857,"byte_end":7617869,"line_start":566,"line_end":566,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1527},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618161,"byte_end":7618169,"line_start":577,"line_end":577,"column_start":9,"column_end":17},"name":"JsNormal","qualname":"::field_options::JsType::JsNormal","value":"JsType::JsNormal","parent":{"krate":0,"index":1526},"children":[],"decl_id":null,"docs":" Use the default type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1530},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618219,"byte_end":7618227,"line_start":579,"line_end":579,"column_start":9,"column_end":17},"name":"JsString","qualname":"::field_options::JsType::JsString","value":"JsType::JsString","parent":{"krate":0,"index":1526},"children":[],"decl_id":null,"docs":" Use JavaScript strings.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1533},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618277,"byte_end":7618285,"line_start":581,"line_end":581,"column_start":9,"column_end":17},"name":"JsNumber","qualname":"::field_options::JsType::JsNumber","value":"JsType::JsNumber","parent":{"krate":0,"index":1526},"children":[],"decl_id":null,"docs":" Use JavaScript numbers.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1526},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618110,"byte_end":7618116,"line_start":575,"line_end":575,"column_start":14,"column_end":20},"name":"JsType","qualname":"::field_options::JsType","value":"JsType::{JsNormal, JsString, JsNumber}","parent":null,"children":[{"krate":0,"index":1527},{"krate":0,"index":1530},{"krate":0,"index":1533}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618084,"byte_end":7618096,"line_start":574,"line_end":574,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1563},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618356,"byte_end":7618368,"line_start":585,"line_end":585,"column_start":12,"column_end":24},"name":"OneofOptions","qualname":"::OneofOptions","value":"OneofOptions { uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1564}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1564},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618494,"byte_end":7618514,"line_start":588,"line_end":588,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::OneofOptions::uninterpreted_option","value":"std::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1563},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618447,"byte_end":7618485,"line_start":587,"line_end":587,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1588},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618613,"byte_end":7618624,"line_start":591,"line_end":591,"column_start":12,"column_end":23},"name":"EnumOptions","qualname":"::EnumOptions","value":"EnumOptions { allow_alias, deprecated, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1591}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1589},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618769,"byte_end":7618780,"line_start":595,"line_end":595,"column_start":9,"column_end":20},"name":"allow_alias","qualname":"::EnumOptions::allow_alias","value":"std::option::Option<bool>","parent":{"krate":0,"index":1588},"children":[],"decl_id":null,"docs":" Set this option to true to allow mapping different tag names to the same\n value.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618727,"byte_end":7618760,"line_start":594,"line_end":594,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1590},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619116,"byte_end":7619126,"line_start":601,"line_end":601,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::EnumOptions::deprecated","value":"std::option::Option<bool>","parent":{"krate":0,"index":1588},"children":[],"decl_id":null,"docs":" Is this enum deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum, or it will be completely ignored; in the very least, this\n is a formalization for deprecating enums.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"3\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619057,"byte_end":7619107,"line_start":600,"line_end":600,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1591},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619280,"byte_end":7619300,"line_start":604,"line_end":604,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::EnumOptions::uninterpreted_option","value":"std::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1588},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619233,"byte_end":7619271,"line_start":603,"line_end":603,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1632},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7618769,"byte_end":7618780,"line_start":595,"line_end":595,"column_start":9,"column_end":20},"name":"allow_alias","qualname":"<EnumOptions>::allow_alias","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1633},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619116,"byte_end":7619126,"line_start":601,"line_end":601,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<EnumOptions>::deprecated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1640},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619399,"byte_end":7619415,"line_start":607,"line_end":607,"column_start":12,"column_end":28},"name":"EnumValueOptions","qualname":"::EnumValueOptions","value":"EnumValueOptions { deprecated, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1641},{"krate":0,"index":1642}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1641},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619741,"byte_end":7619751,"line_start":613,"line_end":613,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::EnumValueOptions::deprecated","value":"std::option::Option<bool>","parent":{"krate":0,"index":1640},"children":[],"decl_id":null,"docs":" Is this enum value deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum value, or it will be completely ignored; in the very least,\n this is a formalization for deprecating enum values.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"1\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619682,"byte_end":7619732,"line_start":612,"line_end":612,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1642},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619905,"byte_end":7619925,"line_start":616,"line_end":616,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::EnumValueOptions::uninterpreted_option","value":"std::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1640},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619858,"byte_end":7619896,"line_start":615,"line_end":615,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1672},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7619741,"byte_end":7619751,"line_start":613,"line_end":613,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<EnumValueOptions>::deprecated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1679},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7620024,"byte_end":7620038,"line_start":619,"line_end":619,"column_start":12,"column_end":26},"name":"ServiceOptions","qualname":"::ServiceOptions","value":"ServiceOptions { deprecated, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1680},{"krate":0,"index":1681}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1680},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7620613,"byte_end":7620623,"line_start":630,"line_end":630,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::ServiceOptions::deprecated","value":"std::option::Option<bool>","parent":{"krate":0,"index":1679},"children":[],"decl_id":null,"docs":" Is this service deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the service, or it will be completely ignored; in the very least,\n this is a formalization for deprecating services.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"33\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7620553,"byte_end":7620604,"line_start":629,"line_end":629,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1681},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7620777,"byte_end":7620797,"line_start":633,"line_end":633,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::ServiceOptions::uninterpreted_option","value":"std::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1679},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7620730,"byte_end":7620768,"line_start":632,"line_end":632,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7620613,"byte_end":7620623,"line_start":630,"line_end":630,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<ServiceOptions>::deprecated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1718},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7620896,"byte_end":7620909,"line_start":636,"line_end":636,"column_start":12,"column_end":25},"name":"MethodOptions","qualname":"::MethodOptions","value":"MethodOptions { deprecated, idempotency_level, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1719},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7621481,"byte_end":7621491,"line_start":647,"line_end":647,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::MethodOptions::deprecated","value":"std::option::Option<bool>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" Is this method deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the method, or it will be completely ignored; in the very least,\n this is a formalization for deprecating methods.\n","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"33\", default = \"false\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7621421,"byte_end":7621472,"line_start":646,"line_end":646,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1720},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7621641,"byte_end":7621658,"line_start":649,"line_end":649,"column_start":9,"column_end":26},"name":"idempotency_level","qualname":"::MethodOptions::idempotency_level","value":"std::option::Option<i32>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(enumeration = \"method_options::IdempotencyLevel\", optional, tag =\n        \"34\", default = \"IdempotencyUnknown\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7621526,"byte_end":7621632,"line_start":648,"line_end":648,"column_start":5,"column_end":111}}]},{"kind":"Field","id":{"krate":0,"index":1721},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7621811,"byte_end":7621831,"line_start":652,"line_end":652,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::MethodOptions::uninterpreted_option","value":"std::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7621764,"byte_end":7621802,"line_start":651,"line_end":651,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7621481,"byte_end":7621491,"line_start":647,"line_end":647,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<MethodOptions>::deprecated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1768},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7621641,"byte_end":7621658,"line_start":649,"line_end":649,"column_start":9,"column_end":26},"name":"idempotency_level","qualname":"<MethodOptions>::idempotency_level","value":"fn (&self) -> super::method_options::IdempotencyLevel","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7621881,"byte_end":7621895,"line_start":654,"line_end":654,"column_start":9,"column_end":23},"name":"method_options","qualname":"::method_options","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1776},{"krate":0,"index":1811},{"krate":0,"index":1810},{"krate":0,"index":1808},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1799},{"krate":0,"index":1797},{"krate":0,"index":1795},{"krate":0,"index":1786}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1777},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7622293,"byte_end":7622311,"line_start":661,"line_end":661,"column_start":9,"column_end":27},"name":"IdempotencyUnknown","qualname":"::method_options::IdempotencyLevel::IdempotencyUnknown","value":"IdempotencyLevel::IdempotencyUnknown","parent":{"krate":0,"index":1776},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1780},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7622356,"byte_end":7622369,"line_start":663,"line_end":663,"column_start":9,"column_end":22},"name":"NoSideEffects","qualname":"::method_options::IdempotencyLevel::NoSideEffects","value":"IdempotencyLevel::NoSideEffects","parent":{"krate":0,"index":1776},"children":[],"decl_id":null,"docs":" implies idempotent\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1783},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7622433,"byte_end":7622443,"line_start":665,"line_end":665,"column_start":9,"column_end":19},"name":"Idempotent","qualname":"::method_options::IdempotencyLevel::Idempotent","value":"IdempotencyLevel::Idempotent","parent":{"krate":0,"index":1776},"children":[],"decl_id":null,"docs":" idempotent, but may have side effects\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1776},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7622266,"byte_end":7622282,"line_start":660,"line_end":660,"column_start":14,"column_end":30},"name":"IdempotencyLevel","qualname":"::method_options::IdempotencyLevel","value":"IdempotencyLevel::{IdempotencyUnknown, NoSideEffects, Idempotent}","parent":null,"children":[{"krate":0,"index":1777},{"krate":0,"index":1780},{"krate":0,"index":1783}],"decl_id":null,"docs":" Is this method side-effect-free (or safe in HTTP parlance), or idempotent,\n or neither? HTTP based RPC implementation may choose GET verb for safe\n methods, and PUT verb for idempotent methods instead of the default POST.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7622240,"byte_end":7622252,"line_start":659,"line_end":659,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1813},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7622912,"byte_end":7622931,"line_start":675,"line_end":675,"column_start":12,"column_end":31},"name":"UninterpretedOption","qualname":"::UninterpretedOption","value":"UninterpretedOption { name, identifier_value, positive_int_value, negative_int_value, double_value, string_value, aggregate_value }","parent":null,"children":[{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1820}],"decl_id":null,"docs":" A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1814},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7622983,"byte_end":7622987,"line_start":677,"line_end":677,"column_start":9,"column_end":13},"name":"name","qualname":"::UninterpretedOption::name","value":"std::vec::Vec<uninterpreted_option::NamePart>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7622938,"byte_end":7622974,"line_start":676,"line_end":676,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1815},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623241,"byte_end":7623257,"line_start":681,"line_end":681,"column_start":9,"column_end":25},"name":"identifier_value","qualname":"::UninterpretedOption::identifier_value","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623197,"byte_end":7623232,"line_start":680,"line_end":680,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1816},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623351,"byte_end":7623369,"line_start":683,"line_end":683,"column_start":9,"column_end":27},"name":"positive_int_value","qualname":"::UninterpretedOption::positive_int_value","value":"std::option::Option<u64>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(uint64, optional, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623307,"byte_end":7623342,"line_start":682,"line_end":682,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1817},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623446,"byte_end":7623464,"line_start":685,"line_end":685,"column_start":9,"column_end":27},"name":"negative_int_value","qualname":"::UninterpretedOption::negative_int_value","value":"std::option::Option<i64>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int64, optional, tag = \"5\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623403,"byte_end":7623437,"line_start":684,"line_end":684,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1818},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623542,"byte_end":7623554,"line_start":687,"line_end":687,"column_start":9,"column_end":21},"name":"double_value","qualname":"::UninterpretedOption::double_value","value":"std::option::Option<f64>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(double, optional, tag = \"6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623498,"byte_end":7623533,"line_start":686,"line_end":686,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1819},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623631,"byte_end":7623643,"line_start":689,"line_end":689,"column_start":9,"column_end":21},"name":"string_value","qualname":"::UninterpretedOption::string_value","value":"std::option::Option<std::vec::Vec<u8>>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(bytes, optional, tag = \"7\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623588,"byte_end":7623622,"line_start":688,"line_end":688,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1820},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623735,"byte_end":7623750,"line_start":691,"line_end":691,"column_start":9,"column_end":24},"name":"aggregate_value","qualname":"::UninterpretedOption::aggregate_value","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623691,"byte_end":7623726,"line_start":690,"line_end":690,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1905},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623241,"byte_end":7623257,"line_start":681,"line_end":681,"column_start":9,"column_end":25},"name":"identifier_value","qualname":"<UninterpretedOption>::identifier_value","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623351,"byte_end":7623369,"line_start":683,"line_end":683,"column_start":9,"column_end":27},"name":"positive_int_value","qualname":"<UninterpretedOption>::positive_int_value","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623446,"byte_end":7623464,"line_start":685,"line_end":685,"column_start":9,"column_end":27},"name":"negative_int_value","qualname":"<UninterpretedOption>::negative_int_value","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1908},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623542,"byte_end":7623554,"line_start":687,"line_end":687,"column_start":9,"column_end":21},"name":"double_value","qualname":"<UninterpretedOption>::double_value","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1909},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623631,"byte_end":7623643,"line_start":689,"line_end":689,"column_start":9,"column_end":21},"name":"string_value","qualname":"<UninterpretedOption>::string_value","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1910},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623735,"byte_end":7623750,"line_start":691,"line_end":691,"column_start":9,"column_end":24},"name":"aggregate_value","qualname":"<UninterpretedOption>::aggregate_value","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7623806,"byte_end":7623826,"line_start":693,"line_end":693,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::uninterpreted_option","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1917},{"krate":0,"index":1946},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1920}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1917},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7624243,"byte_end":7624251,"line_start":700,"line_end":700,"column_start":16,"column_end":24},"name":"NamePart","qualname":"::uninterpreted_option::NamePart","value":"NamePart { name_part, is_extension }","parent":null,"children":[{"krate":0,"index":1918},{"krate":0,"index":1919}],"decl_id":null,"docs":" The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1918},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7624310,"byte_end":7624319,"line_start":702,"line_end":702,"column_start":13,"column_end":22},"name":"name_part","qualname":"::uninterpreted_option::NamePart::name_part","value":"std::string::String","parent":{"krate":0,"index":1917},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, required, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7624262,"byte_end":7624297,"line_start":701,"line_end":701,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1919},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7624396,"byte_end":7624408,"line_start":704,"line_end":704,"column_start":13,"column_end":25},"name":"is_extension","qualname":"::uninterpreted_option::NamePart::is_extension","value":"bool","parent":{"krate":0,"index":1917},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(bool, required, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7624350,"byte_end":7624383,"line_start":703,"line_end":703,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1948},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7624694,"byte_end":7624708,"line_start":713,"line_end":713,"column_start":12,"column_end":26},"name":"SourceCodeInfo","qualname":"::SourceCodeInfo","value":"SourceCodeInfo { location }","parent":null,"children":[{"krate":0,"index":1949}],"decl_id":null,"docs":" Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1949},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7627224,"byte_end":7627232,"line_start":758,"line_end":758,"column_start":9,"column_end":17},"name":"location","qualname":"::SourceCodeInfo::location","value":"std::vec::Vec<source_code_info::Location>","parent":{"krate":0,"index":1948},"children":[],"decl_id":null,"docs":" A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7627179,"byte_end":7627215,"line_start":757,"line_end":757,"column_start":5,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7627289,"byte_end":7627305,"line_start":760,"line_end":760,"column_start":9,"column_end":25},"name":"source_code_info","qualname":"::source_code_info","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1973},{"krate":0,"index":2054},{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":1979}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1973},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7627373,"byte_end":7627381,"line_start":762,"line_end":762,"column_start":16,"column_end":24},"name":"Location","qualname":"::source_code_info::Location","value":"Location { path, span, leading_comments, trailing_comments, leading_detached_comments }","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1974},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7628574,"byte_end":7628578,"line_start":787,"line_end":787,"column_start":13,"column_end":17},"name":"path","qualname":"::source_code_info::Location::path","value":"std::vec::Vec<i32>","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":" Identifies which part of the FileDescriptorProto was defined at this\n location.","sig":null,"attributes":[{"value":"prost(int32, repeated, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7628527,"byte_end":7628561,"line_start":786,"line_end":786,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1975},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7629033,"byte_end":7629037,"line_start":794,"line_end":794,"column_start":13,"column_end":17},"name":"span","qualname":"::source_code_info::Location::span","value":"std::vec::Vec<i32>","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":" Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n","sig":null,"attributes":[{"value":"prost(int32, repeated, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7628986,"byte_end":7629020,"line_start":793,"line_end":793,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1976},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631190,"byte_end":7631206,"line_start":843,"line_end":843,"column_start":13,"column_end":29},"name":"leading_comments","qualname":"::source_code_info::Location::leading_comments","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":" If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631142,"byte_end":7631177,"line_start":842,"line_end":842,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1977},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631308,"byte_end":7631325,"line_start":845,"line_end":845,"column_start":13,"column_end":30},"name":"trailing_comments","qualname":"::source_code_info::Location::trailing_comments","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631260,"byte_end":7631295,"line_start":844,"line_end":844,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1978},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631427,"byte_end":7631452,"line_start":847,"line_end":847,"column_start":13,"column_end":38},"name":"leading_detached_comments","qualname":"::source_code_info::Location::leading_detached_comments","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, repeated, tag = \"6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631379,"byte_end":7631414,"line_start":846,"line_end":846,"column_start":9,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2048},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631190,"byte_end":7631206,"line_start":843,"line_end":843,"column_start":13,"column_end":29},"name":"leading_comments","qualname":"<Location>::leading_comments","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2049},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631308,"byte_end":7631325,"line_start":845,"line_end":845,"column_start":13,"column_end":30},"name":"trailing_comments","qualname":"<Location>::trailing_comments","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2056},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631789,"byte_end":7631806,"line_start":854,"line_end":854,"column_start":12,"column_end":29},"name":"GeneratedCodeInfo","qualname":"::GeneratedCodeInfo","value":"GeneratedCodeInfo { annotation }","parent":null,"children":[{"krate":0,"index":2057}],"decl_id":null,"docs":" Describes the relationship between generated code and its original source\n file. A GeneratedCodeInfo message is associated with only one generated\n source file, but may contain references to different source .proto files.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2057},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631978,"byte_end":7631988,"line_start":858,"line_end":858,"column_start":9,"column_end":19},"name":"annotation","qualname":"::GeneratedCodeInfo::annotation","value":"std::vec::Vec<generated_code_info::Annotation>","parent":{"krate":0,"index":2056},"children":[],"decl_id":null,"docs":" An Annotation connects some span of text in generated code to an element\n of its generating .proto file.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7631933,"byte_end":7631969,"line_start":857,"line_end":857,"column_start":5,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7632050,"byte_end":7632069,"line_start":860,"line_end":860,"column_start":9,"column_end":28},"name":"generated_code_info","qualname":"::generated_code_info","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":2081},{"krate":0,"index":2153},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2086}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2081},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7632137,"byte_end":7632147,"line_start":862,"line_end":862,"column_start":16,"column_end":26},"name":"Annotation","qualname":"::generated_code_info::Annotation","value":"Annotation { path, source_file, begin, end }","parent":null,"children":[{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2085}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2082},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7632354,"byte_end":7632358,"line_start":866,"line_end":866,"column_start":13,"column_end":17},"name":"path","qualname":"::generated_code_info::Annotation::path","value":"std::vec::Vec<i32>","parent":{"krate":0,"index":2081},"children":[],"decl_id":null,"docs":" Identifies the element in the original source .proto file. This field\n is formatted the same as SourceCodeInfo.Location.path.\n","sig":null,"attributes":[{"value":"prost(int32, repeated, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7632307,"byte_end":7632341,"line_start":865,"line_end":865,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":2083},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7632512,"byte_end":7632523,"line_start":869,"line_end":869,"column_start":13,"column_end":24},"name":"source_file","qualname":"::generated_code_info::Annotation::source_file","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":2081},"children":[],"decl_id":null,"docs":" Identifies the filesystem path to the original source .proto.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7632464,"byte_end":7632499,"line_start":868,"line_end":868,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2084},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7632749,"byte_end":7632754,"line_start":873,"line_end":873,"column_start":13,"column_end":18},"name":"begin","qualname":"::generated_code_info::Annotation::begin","value":"std::option::Option<i32>","parent":{"krate":0,"index":2081},"children":[],"decl_id":null,"docs":" Identifies the starting offset in bytes in the generated code\n that relates to the identified object.\n","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7632702,"byte_end":7632736,"line_start":872,"line_end":872,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":2085},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7633074,"byte_end":7633077,"line_start":878,"line_end":878,"column_start":13,"column_end":16},"name":"end","qualname":"::generated_code_info::Annotation::end","value":"std::option::Option<i32>","parent":{"krate":0,"index":2081},"children":[],"decl_id":null,"docs":" Identifies the ending offset in bytes in the generated code that\n relates to the identified offset. The end offset should be one past\n the last relevant byte (so the length of the text = end - begin).\n","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7633027,"byte_end":7633061,"line_start":877,"line_end":877,"column_start":9,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2146},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7632512,"byte_end":7632523,"line_start":869,"line_end":869,"column_start":13,"column_end":24},"name":"source_file","qualname":"<Annotation>::source_file","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7632749,"byte_end":7632754,"line_start":873,"line_end":873,"column_start":13,"column_end":18},"name":"begin","qualname":"<Annotation>::begin","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7633074,"byte_end":7633077,"line_start":878,"line_end":878,"column_start":13,"column_end":16},"name":"end","qualname":"<Annotation>::end","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2155},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7635546,"byte_end":7635549,"line_start":962,"line_end":962,"column_start":12,"column_end":15},"name":"Any","qualname":"::Any","value":"Any { type_url, value }","parent":null,"children":[{"krate":0,"index":2156},{"krate":0,"index":2157}],"decl_id":null,"docs":" `Any` contains an arbitrary serialized protocol buffer message along with a\n URL that describes the type of the serialized message.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2156},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637077,"byte_end":7637085,"line_start":991,"line_end":991,"column_start":9,"column_end":17},"name":"type_url","qualname":"::Any::type_url","value":"std::string::String","parent":{"krate":0,"index":2155},"children":[],"decl_id":null,"docs":" A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).","sig":null,"attributes":[{"value":"prost(string, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637043,"byte_end":7637068,"line_start":990,"line_end":990,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2157},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637225,"byte_end":7637230,"line_start":994,"line_end":994,"column_start":9,"column_end":14},"name":"value","qualname":"::Any::value","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":2155},"children":[],"decl_id":null,"docs":" Must be a valid serialized protocol buffer of the above specified type.\n","sig":null,"attributes":[{"value":"prost(bytes, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637192,"byte_end":7637216,"line_start":993,"line_end":993,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2186},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637435,"byte_end":7637448,"line_start":999,"line_end":999,"column_start":12,"column_end":25},"name":"SourceContext","qualname":"::SourceContext","value":"SourceContext { file_name }","parent":null,"children":[{"krate":0,"index":2187}],"decl_id":null,"docs":" `SourceContext` represents information about the source of a\n protobuf element, like the file in which it is defined.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2187},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637652,"byte_end":7637661,"line_start":1003,"line_end":1003,"column_start":9,"column_end":18},"name":"file_name","qualname":"::SourceContext::file_name","value":"std::string::String","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":" The path-qualified name of the .proto file that contained the associated\n protobuf element.  For example: `\"google/protobuf/source_context.proto\"`.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637618,"byte_end":7637643,"line_start":1002,"line_end":1002,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2213},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637779,"byte_end":7637783,"line_start":1007,"line_end":1007,"column_start":12,"column_end":16},"name":"Type","qualname":"::Type","value":"Type { name, fields, oneofs, options, source_context, syntax }","parent":null,"children":[{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219}],"decl_id":null,"docs":" A protocol buffer message type.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2214},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637866,"byte_end":7637870,"line_start":1010,"line_end":1010,"column_start":9,"column_end":13},"name":"name","qualname":"::Type::name","value":"std::string::String","parent":{"krate":0,"index":2213},"children":[],"decl_id":null,"docs":" The fully qualified message name.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637832,"byte_end":7637857,"line_start":1009,"line_end":1009,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2215},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637970,"byte_end":7637976,"line_start":1013,"line_end":1013,"column_start":9,"column_end":15},"name":"fields","qualname":"::Type::fields","value":"std::vec::Vec<Field>","parent":{"krate":0,"index":2213},"children":[],"decl_id":null,"docs":" The list of fields.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7637925,"byte_end":7637961,"line_start":1012,"line_end":1012,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2216},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638123,"byte_end":7638129,"line_start":1016,"line_end":1016,"column_start":9,"column_end":15},"name":"oneofs","qualname":"::Type::oneofs","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2213},"children":[],"decl_id":null,"docs":" The list of types appearing in `oneof` definitions in this type.\n","sig":null,"attributes":[{"value":"prost(string, repeated, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638079,"byte_end":7638114,"line_start":1015,"line_end":1015,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2217},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638255,"byte_end":7638262,"line_start":1019,"line_end":1019,"column_start":9,"column_end":16},"name":"options","qualname":"::Type::options","value":"std::vec::Vec<Option>","parent":{"krate":0,"index":2213},"children":[],"decl_id":null,"docs":" The protocol buffer options.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638210,"byte_end":7638246,"line_start":1018,"line_end":1018,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2218},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638366,"byte_end":7638380,"line_start":1022,"line_end":1022,"column_start":9,"column_end":23},"name":"source_context","qualname":"::Type::source_context","value":"std::option::Option<SourceContext>","parent":{"krate":0,"index":2213},"children":[],"decl_id":null,"docs":" The source context.\n","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"5\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638321,"byte_end":7638357,"line_start":1021,"line_end":1021,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2219},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638499,"byte_end":7638505,"line_start":1025,"line_end":1025,"column_start":9,"column_end":15},"name":"syntax","qualname":"::Type::syntax","value":"i32","parent":{"krate":0,"index":2213},"children":[],"decl_id":null,"docs":" The source syntax.\n","sig":null,"attributes":[{"value":"prost(enumeration = \"Syntax\", tag = \"6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638451,"byte_end":7638490,"line_start":1024,"line_end":1024,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638499,"byte_end":7638505,"line_start":1025,"line_end":1025,"column_start":9,"column_end":15},"name":"syntax","qualname":"<Type>::syntax","value":"fn (&self) -> super::Syntax","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2270},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638609,"byte_end":7638614,"line_start":1029,"line_end":1029,"column_start":12,"column_end":17},"name":"Field","qualname":"::Field","value":"Field { kind, cardinality, number, name, type_url, oneof_index, packed, options, json_name, default_value }","parent":null,"children":[{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280}],"decl_id":null,"docs":" A single field of a message type.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2271},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638698,"byte_end":7638702,"line_start":1032,"line_end":1032,"column_start":9,"column_end":13},"name":"kind","qualname":"::Field::kind","value":"i32","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" The field type.\n","sig":null,"attributes":[{"value":"prost(enumeration = \"field::Kind\", tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638645,"byte_end":7638689,"line_start":1031,"line_end":1031,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2272},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638804,"byte_end":7638815,"line_start":1035,"line_end":1035,"column_start":9,"column_end":20},"name":"cardinality","qualname":"::Field::cardinality","value":"i32","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" The field cardinality.\n","sig":null,"attributes":[{"value":"prost(enumeration = \"field::Cardinality\", tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638744,"byte_end":7638795,"line_start":1034,"line_end":1034,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":2273},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638885,"byte_end":7638891,"line_start":1038,"line_end":1038,"column_start":9,"column_end":15},"name":"number","qualname":"::Field::number","value":"i32","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" The field number.\n","sig":null,"attributes":[{"value":"prost(int32, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638852,"byte_end":7638876,"line_start":1037,"line_end":1037,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2274},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638960,"byte_end":7638964,"line_start":1041,"line_end":1041,"column_start":9,"column_end":13},"name":"name","qualname":"::Field::name","value":"std::string::String","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" The field name.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638926,"byte_end":7638951,"line_start":1040,"line_end":1040,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2275},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639175,"byte_end":7639183,"line_start":1045,"line_end":1045,"column_start":9,"column_end":17},"name":"type_url","qualname":"::Field::type_url","value":"std::string::String","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" The field type URL, without the scheme, for message or enumeration\n types. Example: `\"type.googleapis.com/google.protobuf.Timestamp\"`.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639141,"byte_end":7639166,"line_start":1044,"line_end":1044,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2276},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639407,"byte_end":7639418,"line_start":1049,"line_end":1049,"column_start":9,"column_end":20},"name":"oneof_index","qualname":"::Field::oneof_index","value":"i32","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" The index of the field type in `Type.oneofs`, for message or enumeration\n types. The first type has index 1; zero means the type is not in the list.\n","sig":null,"attributes":[{"value":"prost(int32, tag = \"7\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639374,"byte_end":7639398,"line_start":1048,"line_end":1048,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2277},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639524,"byte_end":7639530,"line_start":1052,"line_end":1052,"column_start":9,"column_end":15},"name":"packed","qualname":"::Field::packed","value":"bool","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" Whether to use alternative packed wire representation.\n","sig":null,"attributes":[{"value":"prost(bool, tag = \"8\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639492,"byte_end":7639515,"line_start":1051,"line_end":1051,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2278},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639624,"byte_end":7639631,"line_start":1055,"line_end":1055,"column_start":9,"column_end":16},"name":"options","qualname":"::Field::options","value":"std::vec::Vec<Option>","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" The protocol buffer options.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"9\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639579,"byte_end":7639615,"line_start":1054,"line_end":1054,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2279},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639726,"byte_end":7639735,"line_start":1058,"line_end":1058,"column_start":9,"column_end":18},"name":"json_name","qualname":"::Field::json_name","value":"std::string::String","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" The field JSON name.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"10\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639691,"byte_end":7639717,"line_start":1057,"line_end":1057,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2280},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639878,"byte_end":7639891,"line_start":1061,"line_end":1061,"column_start":9,"column_end":22},"name":"default_value","qualname":"::Field::default_value","value":"std::string::String","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" The string value of the default value of this field. Proto2 syntax only.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"11\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639843,"byte_end":7639869,"line_start":1060,"line_end":1060,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2336},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638698,"byte_end":7638702,"line_start":1032,"line_end":1032,"column_start":9,"column_end":13},"name":"kind","qualname":"<Field>::kind","value":"fn (&self) -> super::field::Kind","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2338},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7638804,"byte_end":7638815,"line_start":1035,"line_end":1035,"column_start":9,"column_end":20},"name":"cardinality","qualname":"<Field>::cardinality","value":"fn (&self) -> super::field::Cardinality","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7639924,"byte_end":7639929,"line_start":1063,"line_end":1063,"column_start":9,"column_end":14},"name":"field","qualname":"::field","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":2346},{"krate":0,"index":2429},{"krate":0,"index":2428},{"krate":0,"index":2426},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2417},{"krate":0,"index":2415},{"krate":0,"index":2413},{"krate":0,"index":2404},{"krate":0,"index":2431},{"krate":0,"index":2469},{"krate":0,"index":2468},{"krate":0,"index":2466},{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2457},{"krate":0,"index":2455},{"krate":0,"index":2453},{"krate":0,"index":2444}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2347},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640130,"byte_end":7640141,"line_start":1069,"line_end":1069,"column_start":9,"column_end":20},"name":"TypeUnknown","qualname":"::field::Kind::TypeUnknown","value":"Kind::TypeUnknown","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type unknown.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2350},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640186,"byte_end":7640196,"line_start":1071,"line_end":1071,"column_start":9,"column_end":19},"name":"TypeDouble","qualname":"::field::Kind::TypeDouble","value":"Kind::TypeDouble","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type double.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2353},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640240,"byte_end":7640249,"line_start":1073,"line_end":1073,"column_start":9,"column_end":18},"name":"TypeFloat","qualname":"::field::Kind::TypeFloat","value":"Kind::TypeFloat","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type float.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2356},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640293,"byte_end":7640302,"line_start":1075,"line_end":1075,"column_start":9,"column_end":18},"name":"TypeInt64","qualname":"::field::Kind::TypeInt64","value":"Kind::TypeInt64","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type int64.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2359},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640347,"byte_end":7640357,"line_start":1077,"line_end":1077,"column_start":9,"column_end":19},"name":"TypeUint64","qualname":"::field::Kind::TypeUint64","value":"Kind::TypeUint64","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type uint64.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2362},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640401,"byte_end":7640410,"line_start":1079,"line_end":1079,"column_start":9,"column_end":18},"name":"TypeInt32","qualname":"::field::Kind::TypeInt32","value":"Kind::TypeInt32","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type int32.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2365},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640456,"byte_end":7640467,"line_start":1081,"line_end":1081,"column_start":9,"column_end":20},"name":"TypeFixed64","qualname":"::field::Kind::TypeFixed64","value":"Kind::TypeFixed64","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type fixed64.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2368},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640513,"byte_end":7640524,"line_start":1083,"line_end":1083,"column_start":9,"column_end":20},"name":"TypeFixed32","qualname":"::field::Kind::TypeFixed32","value":"Kind::TypeFixed32","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type fixed32.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2371},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640567,"byte_end":7640575,"line_start":1085,"line_end":1085,"column_start":9,"column_end":17},"name":"TypeBool","qualname":"::field::Kind::TypeBool","value":"Kind::TypeBool","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type bool.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2374},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640620,"byte_end":7640630,"line_start":1087,"line_end":1087,"column_start":9,"column_end":19},"name":"TypeString","qualname":"::field::Kind::TypeString","value":"Kind::TypeString","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type string.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2377},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640710,"byte_end":7640719,"line_start":1089,"line_end":1089,"column_start":9,"column_end":18},"name":"TypeGroup","qualname":"::field::Kind::TypeGroup","value":"Kind::TypeGroup","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type group. Proto2 syntax only, and deprecated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2380},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640766,"byte_end":7640777,"line_start":1091,"line_end":1091,"column_start":9,"column_end":20},"name":"TypeMessage","qualname":"::field::Kind::TypeMessage","value":"Kind::TypeMessage","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type message.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2383},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640822,"byte_end":7640831,"line_start":1093,"line_end":1093,"column_start":9,"column_end":18},"name":"TypeBytes","qualname":"::field::Kind::TypeBytes","value":"Kind::TypeBytes","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2386},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640877,"byte_end":7640887,"line_start":1095,"line_end":1095,"column_start":9,"column_end":19},"name":"TypeUint32","qualname":"::field::Kind::TypeUint32","value":"Kind::TypeUint32","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type uint32.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2389},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640931,"byte_end":7640939,"line_start":1097,"line_end":1097,"column_start":9,"column_end":17},"name":"TypeEnum","qualname":"::field::Kind::TypeEnum","value":"Kind::TypeEnum","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type enum.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2392},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640987,"byte_end":7640999,"line_start":1099,"line_end":1099,"column_start":9,"column_end":21},"name":"TypeSfixed32","qualname":"::field::Kind::TypeSfixed32","value":"Kind::TypeSfixed32","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type sfixed32.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2395},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641047,"byte_end":7641059,"line_start":1101,"line_end":1101,"column_start":9,"column_end":21},"name":"TypeSfixed64","qualname":"::field::Kind::TypeSfixed64","value":"Kind::TypeSfixed64","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type sfixed64.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2398},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641105,"byte_end":7641115,"line_start":1103,"line_end":1103,"column_start":9,"column_end":19},"name":"TypeSint32","qualname":"::field::Kind::TypeSint32","value":"Kind::TypeSint32","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type sint32.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2401},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641161,"byte_end":7641171,"line_start":1105,"line_end":1105,"column_start":9,"column_end":19},"name":"TypeSint64","qualname":"::field::Kind::TypeSint64","value":"Kind::TypeSint64","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" Field type sint64.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2346},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640083,"byte_end":7640087,"line_start":1067,"line_end":1067,"column_start":14,"column_end":18},"name":"Kind","qualname":"::field::Kind","value":"Kind::{TypeUnknown, TypeDouble, TypeFloat, TypeInt64, TypeUint64, TypeInt32, TypeFixed64, TypeFixed32, TypeBool, TypeString, TypeGroup, TypeMessage, TypeBytes, TypeUint32, TypeEnum, TypeSfixed32, TypeSfixed64, TypeSint32, TypeSint64}","parent":null,"children":[{"krate":0,"index":2347},{"krate":0,"index":2350},{"krate":0,"index":2353},{"krate":0,"index":2356},{"krate":0,"index":2359},{"krate":0,"index":2362},{"krate":0,"index":2365},{"krate":0,"index":2368},{"krate":0,"index":2371},{"krate":0,"index":2374},{"krate":0,"index":2377},{"krate":0,"index":2380},{"krate":0,"index":2383},{"krate":0,"index":2386},{"krate":0,"index":2389},{"krate":0,"index":2392},{"krate":0,"index":2395},{"krate":0,"index":2398},{"krate":0,"index":2401}],"decl_id":null,"docs":" Basic field types.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7640057,"byte_end":7640069,"line_start":1066,"line_end":1066,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2432},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641439,"byte_end":7641446,"line_start":1112,"line_end":1112,"column_start":9,"column_end":16},"name":"Unknown","qualname":"::field::Cardinality::Unknown","value":"Cardinality::Unknown","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":" For fields with unknown cardinality.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2435},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641493,"byte_end":7641501,"line_start":1114,"line_end":1114,"column_start":9,"column_end":17},"name":"Optional","qualname":"::field::Cardinality::Optional","value":"Cardinality::Optional","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":" For optional fields.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2438},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641568,"byte_end":7641576,"line_start":1116,"line_end":1116,"column_start":9,"column_end":17},"name":"Required","qualname":"::field::Cardinality::Required","value":"Cardinality::Required","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":" For required fields. Proto2 syntax only.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2441},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641623,"byte_end":7641631,"line_start":1118,"line_end":1118,"column_start":9,"column_end":17},"name":"Repeated","qualname":"::field::Cardinality::Repeated","value":"Cardinality::Repeated","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":" For repeated fields.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2431},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641368,"byte_end":7641379,"line_start":1110,"line_end":1110,"column_start":14,"column_end":25},"name":"Cardinality","qualname":"::field::Cardinality","value":"Cardinality::{Unknown, Optional, Required, Repeated}","parent":null,"children":[{"krate":0,"index":2432},{"krate":0,"index":2435},{"krate":0,"index":2438},{"krate":0,"index":2441}],"decl_id":null,"docs":" Whether a field is optional, required, or repeated.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641342,"byte_end":7641354,"line_start":1109,"line_end":1109,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":2471},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641728,"byte_end":7641732,"line_start":1123,"line_end":1123,"column_start":12,"column_end":16},"name":"Enum","qualname":"::Enum","value":"Enum { name, enumvalue, options, source_context, syntax }","parent":null,"children":[{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476}],"decl_id":null,"docs":" Enum type definition.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2472},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641797,"byte_end":7641801,"line_start":1126,"line_end":1126,"column_start":9,"column_end":13},"name":"name","qualname":"::Enum::name","value":"std::string::String","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" Enum type name.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641763,"byte_end":7641788,"line_start":1125,"line_end":1125,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2473},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641905,"byte_end":7641914,"line_start":1129,"line_end":1129,"column_start":9,"column_end":18},"name":"enumvalue","qualname":"::Enum::enumvalue","value":"std::vec::Vec<EnumValue>","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" Enum value definitions.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641860,"byte_end":7641896,"line_start":1128,"line_end":1128,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2474},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642026,"byte_end":7642033,"line_start":1132,"line_end":1132,"column_start":9,"column_end":16},"name":"options","qualname":"::Enum::options","value":"std::vec::Vec<Option>","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" Protocol buffer options.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7641981,"byte_end":7642017,"line_start":1131,"line_end":1131,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2475},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642137,"byte_end":7642151,"line_start":1135,"line_end":1135,"column_start":9,"column_end":23},"name":"source_context","qualname":"::Enum::source_context","value":"std::option::Option<SourceContext>","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" The source context.\n","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642092,"byte_end":7642128,"line_start":1134,"line_end":1134,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2476},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642270,"byte_end":7642276,"line_start":1138,"line_end":1138,"column_start":9,"column_end":15},"name":"syntax","qualname":"::Enum::syntax","value":"i32","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" The source syntax.\n","sig":null,"attributes":[{"value":"prost(enumeration = \"Syntax\", tag = \"5\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642222,"byte_end":7642261,"line_start":1137,"line_end":1137,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642270,"byte_end":7642276,"line_start":1138,"line_end":1138,"column_start":9,"column_end":15},"name":"syntax","qualname":"<Enum>::syntax","value":"fn (&self) -> super::Syntax","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2517},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642369,"byte_end":7642378,"line_start":1142,"line_end":1142,"column_start":12,"column_end":21},"name":"EnumValue","qualname":"::EnumValue","value":"EnumValue { name, number, options }","parent":null,"children":[{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2520}],"decl_id":null,"docs":" Enum value definition.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2518},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642444,"byte_end":7642448,"line_start":1145,"line_end":1145,"column_start":9,"column_end":13},"name":"name","qualname":"::EnumValue::name","value":"std::string::String","parent":{"krate":0,"index":2517},"children":[],"decl_id":null,"docs":" Enum value name.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642410,"byte_end":7642435,"line_start":1144,"line_end":1144,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2519},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642535,"byte_end":7642541,"line_start":1148,"line_end":1148,"column_start":9,"column_end":15},"name":"number","qualname":"::EnumValue::number","value":"i32","parent":{"krate":0,"index":2517},"children":[],"decl_id":null,"docs":" Enum value number.\n","sig":null,"attributes":[{"value":"prost(int32, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642502,"byte_end":7642526,"line_start":1147,"line_end":1147,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2520},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642630,"byte_end":7642637,"line_start":1151,"line_end":1151,"column_start":9,"column_end":16},"name":"options","qualname":"::EnumValue::options","value":"std::vec::Vec<Option>","parent":{"krate":0,"index":2517},"children":[],"decl_id":null,"docs":" Protocol buffer options.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642585,"byte_end":7642621,"line_start":1150,"line_end":1150,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2550},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7642818,"byte_end":7642824,"line_start":1156,"line_end":1156,"column_start":12,"column_end":18},"name":"Option","qualname":"::Option","value":"Option { name, value }","parent":null,"children":[{"krate":0,"index":2551},{"krate":0,"index":2552}],"decl_id":null,"docs":" A protocol buffer option, which can be attached to a message, field,\n enumeration, etc.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2551},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7643130,"byte_end":7643134,"line_start":1162,"line_end":1162,"column_start":9,"column_end":13},"name":"name","qualname":"::Option::name","value":"std::string::String","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":" The option's name. For protobuf built-in options (options defined in\n descriptor.proto), this is the short name. For example, `\"map_entry\"`.\n For custom options, it should be the fully-qualified name. For example,\n `\"google.api.http\"`.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7643096,"byte_end":7643121,"line_start":1161,"line_end":1161,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2552},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7643507,"byte_end":7643512,"line_start":1168,"line_end":1168,"column_start":9,"column_end":14},"name":"value","qualname":"::Option::value","value":"std::option::Option<Any>","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":" The option's value packed in an Any message. If the value is a primitive,\n the corresponding wrapper type defined in google/protobuf/wrappers.proto\n should be used. If the value is an enum, it should be stored as an int32\n value using the google.protobuf.Int32Value type.\n","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7643462,"byte_end":7643498,"line_start":1167,"line_end":1167,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2581},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7643756,"byte_end":7643762,"line_start":1175,"line_end":1175,"column_start":5,"column_end":11},"name":"Proto2","qualname":"::Syntax::Proto2","value":"Syntax::Proto2","parent":{"krate":0,"index":2580},"children":[],"decl_id":null,"docs":" Syntax `proto2`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2584},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7643797,"byte_end":7643803,"line_start":1177,"line_end":1177,"column_start":5,"column_end":11},"name":"Proto3","qualname":"::Syntax::Proto3","value":"Syntax::Proto3","parent":{"krate":0,"index":2580},"children":[],"decl_id":null,"docs":" Syntax `proto3`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2580},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7643718,"byte_end":7643724,"line_start":1173,"line_end":1173,"column_start":10,"column_end":16},"name":"Syntax","qualname":"::Syntax","value":"Syntax::{Proto2, Proto3}","parent":null,"children":[{"krate":0,"index":2581},{"krate":0,"index":2584}],"decl_id":null,"docs":" The syntax in which a protocol buffer element is defined.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7643696,"byte_end":7643708,"line_start":1172,"line_end":1172,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":2614},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7644437,"byte_end":7644440,"line_start":1189,"line_end":1189,"column_start":12,"column_end":15},"name":"Api","qualname":"::Api","value":"Api { name, methods, options, version, source_context, mixins, syntax }","parent":null,"children":[{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2619},{"krate":0,"index":2620},{"krate":0,"index":2621}],"decl_id":null,"docs":" Api is a light-weight descriptor for an API Interface.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2615},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7644605,"byte_end":7644609,"line_start":1193,"line_end":1193,"column_start":9,"column_end":13},"name":"name","qualname":"::Api::name","value":"std::string::String","parent":{"krate":0,"index":2614},"children":[],"decl_id":null,"docs":" The fully qualified name of this interface, including package name\n followed by the interface's simple name.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7644571,"byte_end":7644596,"line_start":1192,"line_end":1192,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2616},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7644742,"byte_end":7644749,"line_start":1196,"line_end":1196,"column_start":9,"column_end":16},"name":"methods","qualname":"::Api::methods","value":"std::vec::Vec<Method>","parent":{"krate":0,"index":2614},"children":[],"decl_id":null,"docs":" The methods of this interface, in unspecified order.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7644697,"byte_end":7644733,"line_start":1195,"line_end":1195,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2617},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7644873,"byte_end":7644880,"line_start":1199,"line_end":1199,"column_start":9,"column_end":16},"name":"options","qualname":"::Api::options","value":"std::vec::Vec<Option>","parent":{"krate":0,"index":2614},"children":[],"decl_id":null,"docs":" Any metadata attached to the interface.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7644828,"byte_end":7644864,"line_start":1198,"line_end":1198,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2618},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646104,"byte_end":7646111,"line_start":1222,"line_end":1222,"column_start":9,"column_end":16},"name":"version","qualname":"::Api::version","value":"std::string::String","parent":{"krate":0,"index":2614},"children":[],"decl_id":null,"docs":" A version string for this interface. If specified, must have the form\n `major-version.minor-version`, as in `1.10`. If the minor version is\n omitted, it defaults to zero. If the entire version field is empty, the\n major version is derived from the package name, as outlined below. If the\n field is not empty, the version in the package name will be verified to be\n consistent with what is provided here.","sig":null,"attributes":[{"value":"prost(string, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646070,"byte_end":7646095,"line_start":1221,"line_end":1221,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2619},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646275,"byte_end":7646289,"line_start":1226,"line_end":1226,"column_start":9,"column_end":23},"name":"source_context","qualname":"::Api::source_context","value":"std::option::Option<SourceContext>","parent":{"krate":0,"index":2614},"children":[],"decl_id":null,"docs":" Source context for the protocol buffer service represented by this\n message.\n","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"5\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646230,"byte_end":7646266,"line_start":1225,"line_end":1225,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2620},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646422,"byte_end":7646428,"line_start":1229,"line_end":1229,"column_start":9,"column_end":15},"name":"mixins","qualname":"::Api::mixins","value":"std::vec::Vec<Mixin>","parent":{"krate":0,"index":2614},"children":[],"decl_id":null,"docs":" Included interfaces. See [Mixin][].\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646377,"byte_end":7646413,"line_start":1228,"line_end":1228,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2621},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646548,"byte_end":7646554,"line_start":1232,"line_end":1232,"column_start":9,"column_end":15},"name":"syntax","qualname":"::Api::syntax","value":"i32","parent":{"krate":0,"index":2614},"children":[],"decl_id":null,"docs":" The source syntax of the service.\n","sig":null,"attributes":[{"value":"prost(enumeration = \"Syntax\", tag = \"7\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646500,"byte_end":7646539,"line_start":1231,"line_end":1231,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2658},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646548,"byte_end":7646554,"line_start":1232,"line_end":1232,"column_start":9,"column_end":15},"name":"syntax","qualname":"<Api>::syntax","value":"fn (&self) -> super::Syntax","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2666},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646672,"byte_end":7646678,"line_start":1236,"line_end":1236,"column_start":12,"column_end":18},"name":"Method","qualname":"::Method","value":"Method { name, request_type_url, request_streaming, response_type_url, response_streaming, options, syntax }","parent":null,"children":[{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2669},{"krate":0,"index":2670},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2673}],"decl_id":null,"docs":" Method represents a method of an API interface.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2667},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646759,"byte_end":7646763,"line_start":1239,"line_end":1239,"column_start":9,"column_end":13},"name":"name","qualname":"::Method::name","value":"std::string::String","parent":{"krate":0,"index":2666},"children":[],"decl_id":null,"docs":" The simple name of this method.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646725,"byte_end":7646750,"line_start":1238,"line_end":1238,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2668},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646865,"byte_end":7646881,"line_start":1242,"line_end":1242,"column_start":9,"column_end":25},"name":"request_type_url","qualname":"::Method::request_type_url","value":"std::string::String","parent":{"krate":0,"index":2666},"children":[],"decl_id":null,"docs":" A URL of the input message type.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646831,"byte_end":7646856,"line_start":1241,"line_end":1241,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2669},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646982,"byte_end":7646999,"line_start":1245,"line_end":1245,"column_start":9,"column_end":26},"name":"request_streaming","qualname":"::Method::request_streaming","value":"bool","parent":{"krate":0,"index":2666},"children":[],"decl_id":null,"docs":" If true, the request is streamed.\n","sig":null,"attributes":[{"value":"prost(bool, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7646950,"byte_end":7646973,"line_start":1244,"line_end":1244,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2670},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7647089,"byte_end":7647106,"line_start":1248,"line_end":1248,"column_start":9,"column_end":26},"name":"response_type_url","qualname":"::Method::response_type_url","value":"std::string::String","parent":{"krate":0,"index":2666},"children":[],"decl_id":null,"docs":" The URL of the output message type.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7647055,"byte_end":7647080,"line_start":1247,"line_end":1247,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2671},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7647208,"byte_end":7647226,"line_start":1251,"line_end":1251,"column_start":9,"column_end":27},"name":"response_streaming","qualname":"::Method::response_streaming","value":"bool","parent":{"krate":0,"index":2666},"children":[],"decl_id":null,"docs":" If true, the response is streamed.\n","sig":null,"attributes":[{"value":"prost(bool, tag = \"5\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7647176,"byte_end":7647199,"line_start":1250,"line_end":1250,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2672},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7647328,"byte_end":7647335,"line_start":1254,"line_end":1254,"column_start":9,"column_end":16},"name":"options","qualname":"::Method::options","value":"std::vec::Vec<Option>","parent":{"krate":0,"index":2666},"children":[],"decl_id":null,"docs":" Any metadata attached to the method.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7647283,"byte_end":7647319,"line_start":1253,"line_end":1253,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2673},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7647456,"byte_end":7647462,"line_start":1257,"line_end":1257,"column_start":9,"column_end":15},"name":"syntax","qualname":"::Method::syntax","value":"i32","parent":{"krate":0,"index":2666},"children":[],"decl_id":null,"docs":" The source syntax of this method.\n","sig":null,"attributes":[{"value":"prost(enumeration = \"Syntax\", tag = \"7\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7647408,"byte_end":7647447,"line_start":1256,"line_end":1256,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2715},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7647456,"byte_end":7647462,"line_start":1257,"line_end":1257,"column_start":9,"column_end":15},"name":"syntax","qualname":"<Method>::syntax","value":"fn (&self) -> super::Syntax","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2723},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7650252,"byte_end":7650257,"line_start":1338,"line_end":1338,"column_start":12,"column_end":17},"name":"Mixin","qualname":"::Mixin","value":"Mixin { name, root }","parent":null,"children":[{"krate":0,"index":2724},{"krate":0,"index":2725}],"decl_id":null,"docs":" Declares an API Interface to be included in this interface. The including\n interface must redeclare all the methods from the included interface, but\n documentation and options are inherited as follows:","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2724},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7650367,"byte_end":7650371,"line_start":1341,"line_end":1341,"column_start":9,"column_end":13},"name":"name","qualname":"::Mixin::name","value":"std::string::String","parent":{"krate":0,"index":2723},"children":[],"decl_id":null,"docs":" The fully qualified name of the interface which is included.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7650333,"byte_end":7650358,"line_start":1340,"line_end":1340,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2725},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7650523,"byte_end":7650527,"line_start":1345,"line_end":1345,"column_start":9,"column_end":13},"name":"root","qualname":"::Mixin::root","value":"std::string::String","parent":{"krate":0,"index":2723},"children":[],"decl_id":null,"docs":" If non-empty specifies a path under which inherited HTTP paths\n are rooted.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7650489,"byte_end":7650514,"line_start":1344,"line_end":1344,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2754},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7652855,"byte_end":7652863,"line_start":1408,"line_end":1408,"column_start":12,"column_end":20},"name":"Duration","qualname":"::Duration","value":"Duration { seconds, nanos }","parent":null,"children":[{"krate":0,"index":2755},{"krate":0,"index":2756}],"decl_id":null,"docs":" A Duration represents a signed, fixed-length span of time represented\n as a count of seconds and fractions of seconds at nanosecond\n resolution. It is independent of any calendar and concepts like \"day\"\n or \"month\". It is related to Timestamp in that the difference between\n two Timestamp values is a Duration and it can be added or subtracted\n from a Timestamp. Range is approximately +-10,000 years.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2755},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7653130,"byte_end":7653137,"line_start":1413,"line_end":1413,"column_start":9,"column_end":16},"name":"seconds","qualname":"::Duration::seconds","value":"i64","parent":{"krate":0,"index":2754},"children":[],"decl_id":null,"docs":" Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years\n","sig":null,"attributes":[{"value":"prost(int64, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7653097,"byte_end":7653121,"line_start":1412,"line_end":1412,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2756},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7653596,"byte_end":7653601,"line_start":1421,"line_end":1421,"column_start":9,"column_end":14},"name":"nanos","qualname":"::Duration::nanos","value":"i32","parent":{"krate":0,"index":2754},"children":[],"decl_id":null,"docs":" Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive.\n","sig":null,"attributes":[{"value":"prost(int32, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7653563,"byte_end":7653587,"line_start":1420,"line_end":1420,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2785},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7659964,"byte_end":7659973,"line_start":1631,"line_end":1631,"column_start":12,"column_end":21},"name":"FieldMask","qualname":"::FieldMask","value":"FieldMask { paths }","parent":null,"children":[{"krate":0,"index":2786}],"decl_id":null,"docs":" `FieldMask` represents a set of symbolic field paths, for example:","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2786},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7660061,"byte_end":7660066,"line_start":1634,"line_end":1634,"column_start":9,"column_end":14},"name":"paths","qualname":"::FieldMask::paths","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2785},"children":[],"decl_id":null,"docs":" The set of field mask paths.\n","sig":null,"attributes":[{"value":"prost(string, repeated, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7660017,"byte_end":7660052,"line_start":1633,"line_end":1633,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2819},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7660611,"byte_end":7660617,"line_start":1645,"line_end":1645,"column_start":12,"column_end":18},"name":"Struct","qualname":"::Struct","value":"Struct { fields }","parent":null,"children":[{"krate":0,"index":2820}],"decl_id":null,"docs":" `Struct` represents a structured data value, consisting of fields\n which map to dynamically typed values. In some languages, `Struct`\n might be supported by a native representation. For example, in\n scripting languages like JS a struct is represented as an\n object. The details of that representation are described together\n with the proto support for the language.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2820},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7660730,"byte_end":7660736,"line_start":1648,"line_end":1648,"column_start":9,"column_end":15},"name":"fields","qualname":"::Struct::fields","value":"std::collections::BTreeMap<std::string::String, Value>","parent":{"krate":0,"index":2819},"children":[],"decl_id":null,"docs":" Unordered map of dynamically typed values.\n","sig":null,"attributes":[{"value":"prost(btree_map = \"string, message\", tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7660675,"byte_end":7660721,"line_start":1647,"line_end":1647,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":2857},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661183,"byte_end":7661188,"line_start":1657,"line_end":1657,"column_start":12,"column_end":17},"name":"Value","qualname":"::Value","value":"Value { kind }","parent":null,"children":[{"krate":0,"index":2858}],"decl_id":null,"docs":" `Value` represents a dynamically typed value which can be either\n null, a number, a string, a boolean, a recursive struct value, or a\n list of values. A producer of value is expected to set one of that\n variants, absence of any variant indicates an error.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2858},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661285,"byte_end":7661289,"line_start":1660,"line_end":1660,"column_start":9,"column_end":13},"name":"kind","qualname":"::Value::kind","value":"std::option::Option<value::Kind>","parent":{"krate":0,"index":2857},"children":[],"decl_id":null,"docs":" The kind of value.\n","sig":null,"attributes":[{"value":"prost(oneof = \"value::Kind\", tags = \"1, 2, 3, 4, 5, 6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661222,"byte_end":7661276,"line_start":1659,"line_end":1659,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661337,"byte_end":7661342,"line_start":1662,"line_end":1662,"column_start":9,"column_end":14},"name":"value","qualname":"::value","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":2882},{"krate":0,"index":2936},{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2901}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2883},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661543,"byte_end":7661552,"line_start":1668,"line_end":1668,"column_start":9,"column_end":18},"name":"NullValue","qualname":"::value::Kind::NullValue","value":"Kind::NullValue(i32)","parent":{"krate":0,"index":2882},"children":[],"decl_id":null,"docs":" Represents a null value.\n","sig":null,"attributes":[{"value":"prost(enumeration = \"super::NullValue\", tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661485,"byte_end":7661534,"line_start":1667,"line_end":1667,"column_start":9,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2886},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661640,"byte_end":7661651,"line_start":1671,"line_end":1671,"column_start":9,"column_end":20},"name":"NumberValue","qualname":"::value::Kind::NumberValue","value":"Kind::NumberValue(f64)","parent":{"krate":0,"index":2882},"children":[],"decl_id":null,"docs":" Represents a double value.\n","sig":null,"attributes":[{"value":"prost(double, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661606,"byte_end":7661631,"line_start":1670,"line_end":1670,"column_start":9,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2889},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661739,"byte_end":7661750,"line_start":1674,"line_end":1674,"column_start":9,"column_end":20},"name":"StringValue","qualname":"::value::Kind::StringValue","value":"Kind::StringValue(std::string::String)","parent":{"krate":0,"index":2882},"children":[],"decl_id":null,"docs":" Represents a string value.\n","sig":null,"attributes":[{"value":"prost(string, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661705,"byte_end":7661730,"line_start":1673,"line_end":1673,"column_start":9,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2892},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661853,"byte_end":7661862,"line_start":1677,"line_end":1677,"column_start":9,"column_end":18},"name":"BoolValue","qualname":"::value::Kind::BoolValue","value":"Kind::BoolValue(bool)","parent":{"krate":0,"index":2882},"children":[],"decl_id":null,"docs":" Represents a boolean value.\n","sig":null,"attributes":[{"value":"prost(bool, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661821,"byte_end":7661844,"line_start":1676,"line_end":1676,"column_start":9,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2895},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661956,"byte_end":7661967,"line_start":1680,"line_end":1680,"column_start":9,"column_end":20},"name":"StructValue","qualname":"::value::Kind::StructValue","value":"Kind::StructValue(super::Struct)","parent":{"krate":0,"index":2882},"children":[],"decl_id":null,"docs":" Represents a structured value.\n","sig":null,"attributes":[{"value":"prost(message, tag = \"5\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661921,"byte_end":7661947,"line_start":1679,"line_end":1679,"column_start":9,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2898},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7662070,"byte_end":7662079,"line_start":1683,"line_end":1683,"column_start":9,"column_end":18},"name":"ListValue","qualname":"::value::Kind::ListValue","value":"Kind::ListValue(super::ListValue)","parent":{"krate":0,"index":2882},"children":[],"decl_id":null,"docs":" Represents a repeated `Value`.\n","sig":null,"attributes":[{"value":"prost(message, tag = \"6\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7662035,"byte_end":7662061,"line_start":1682,"line_end":1682,"column_start":9,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":2882},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7661433,"byte_end":7661437,"line_start":1665,"line_end":1665,"column_start":14,"column_end":18},"name":"Kind","qualname":"::value::Kind","value":"Kind::{NullValue, NumberValue, StringValue, BoolValue, StructValue, ListValue}","parent":null,"children":[{"krate":0,"index":2883},{"krate":0,"index":2886},{"krate":0,"index":2889},{"krate":0,"index":2892},{"krate":0,"index":2895},{"krate":0,"index":2898}],"decl_id":null,"docs":" The kind of value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2938},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7662291,"byte_end":7662300,"line_start":1690,"line_end":1690,"column_start":12,"column_end":21},"name":"ListValue","qualname":"::ListValue","value":"ListValue { values }","parent":null,"children":[{"krate":0,"index":2939}],"decl_id":null,"docs":" `ListValue` is a wrapper around a repeated field of values.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2939},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7662404,"byte_end":7662410,"line_start":1693,"line_end":1693,"column_start":9,"column_end":15},"name":"values","qualname":"::ListValue::values","value":"std::vec::Vec<Value>","parent":{"krate":0,"index":2938},"children":[],"decl_id":null,"docs":" Repeated field of dynamically typed values.\n","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7662359,"byte_end":7662395,"line_start":1692,"line_end":1692,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2964},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7662754,"byte_end":7662763,"line_start":1703,"line_end":1703,"column_start":5,"column_end":14},"name":"NullValue","qualname":"::NullValue::NullValue","value":"NullValue::NullValue","parent":{"krate":0,"index":2963},"children":[],"decl_id":null,"docs":" Null value.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2963},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7662718,"byte_end":7662727,"line_start":1701,"line_end":1701,"column_start":10,"column_end":19},"name":"NullValue","qualname":"::NullValue","value":"NullValue::{NullValue}","parent":null,"children":[{"krate":0,"index":2964}],"decl_id":null,"docs":" `NullValue` is a singleton enumeration to represent the null value for the\n `Value` type union.","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7662696,"byte_end":7662708,"line_start":1700,"line_end":1700,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":2994},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7666562,"byte_end":7666571,"line_start":1786,"line_end":1786,"column_start":12,"column_end":21},"name":"Timestamp","qualname":"::Timestamp","value":"Timestamp { seconds, nanos }","parent":null,"children":[{"krate":0,"index":2995},{"krate":0,"index":2996}],"decl_id":null,"docs":" A Timestamp represents a point in time independent of any time zone\n or calendar, represented as seconds and fractions of seconds at\n nanosecond resolution in UTC Epoch time. It is encoded using the\n Proleptic Gregorian Calendar which extends the Gregorian calendar\n backwards to year one. It is encoded assuming all minutes are 60\n seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n table is needed for interpretation. Range is from\n 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.\n By restricting to that range, we ensure that we can convert to\n and from  RFC 3339 date strings.\n See [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2995},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7666774,"byte_end":7666781,"line_start":1791,"line_end":1791,"column_start":9,"column_end":16},"name":"seconds","qualname":"::Timestamp::seconds","value":"i64","parent":{"krate":0,"index":2994},"children":[],"decl_id":null,"docs":" Represents seconds of UTC time since Unix epoch\n 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n 9999-12-31T23:59:59Z inclusive.\n","sig":null,"attributes":[{"value":"prost(int64, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7666741,"byte_end":7666765,"line_start":1790,"line_end":1790,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2996},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7667067,"byte_end":7667072,"line_start":1797,"line_end":1797,"column_start":9,"column_end":14},"name":"nanos","qualname":"::Timestamp::nanos","value":"i32","parent":{"krate":0,"index":2994},"children":[],"decl_id":null,"docs":" Non-negative fractions of a second at nanosecond resolution. Negative\n second values with fractions must still have non-negative nanos values\n that count forward in time. Must be from 0 to 999,999,999\n inclusive.\n","sig":null,"attributes":[{"value":"prost(int32, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/protobuf.rs","byte_start":7667034,"byte_end":7667058,"line_start":1796,"line_end":1796,"column_start":5,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":512,"byte_end":520,"line_start":17,"line_end":17,"column_start":9,"column_end":17},"name":"compiler","qualname":"::compiler","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":3026},{"krate":0,"index":3100},{"krate":0,"index":3096},{"krate":0,"index":3097},{"krate":0,"index":3031},{"krate":0,"index":3102},{"krate":0,"index":3153},{"krate":0,"index":3149},{"krate":0,"index":3150},{"krate":0,"index":3107},{"krate":0,"index":3155},{"krate":0,"index":3192},{"krate":0,"index":3188},{"krate":0,"index":3189},{"krate":0,"index":3158},{"krate":0,"index":3025}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3026},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8781679,"byte_end":8781686,"line_start":3,"line_end":3,"column_start":12,"column_end":19},"name":"Version","qualname":"::compiler::Version","value":"Version { major, minor, patch, suffix }","parent":null,"children":[{"krate":0,"index":3027},{"krate":0,"index":3028},{"krate":0,"index":3029},{"krate":0,"index":3030}],"decl_id":null,"docs":" The version number of protocol compiler.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3027},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8781736,"byte_end":8781741,"line_start":5,"line_end":5,"column_start":9,"column_end":14},"name":"major","qualname":"::compiler::Version::major","value":"std::option::Option<i32>","parent":{"krate":0,"index":3026},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8781693,"byte_end":8781727,"line_start":4,"line_end":4,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":3028},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8781818,"byte_end":8781823,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"name":"minor","qualname":"::compiler::Version::minor","value":"std::option::Option<i32>","parent":{"krate":0,"index":3026},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8781775,"byte_end":8781809,"line_start":6,"line_end":6,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":3029},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8781900,"byte_end":8781905,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"patch","qualname":"::compiler::Version::patch","value":"std::option::Option<i32>","parent":{"krate":0,"index":3026},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8781857,"byte_end":8781891,"line_start":8,"line_end":8,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":3030},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8782112,"byte_end":8782118,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"name":"suffix","qualname":"::compiler::Version::suffix","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3026},"children":[],"decl_id":null,"docs":" A suffix for alpha, beta or rc release, e.g., \"alpha-1\", \"rc2\". It should\n be empty for mainline stable releases.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"4\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8782068,"byte_end":8782103,"line_start":12,"line_end":12,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3092},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8781736,"byte_end":8781741,"line_start":5,"line_end":5,"column_start":9,"column_end":14},"name":"major","qualname":"<Version>::major","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3093},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8781818,"byte_end":8781823,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"name":"minor","qualname":"<Version>::minor","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3094},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8781900,"byte_end":8781905,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"patch","qualname":"<Version>::patch","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3095},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8782112,"byte_end":8782118,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"name":"suffix","qualname":"<Version>::suffix","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3102},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8782293,"byte_end":8782313,"line_start":17,"line_end":17,"column_start":12,"column_end":32},"name":"CodeGeneratorRequest","qualname":"::compiler::CodeGeneratorRequest","value":"CodeGeneratorRequest { file_to_generate, parameter, proto_file, compiler_version }","parent":null,"children":[{"krate":0,"index":3103},{"krate":0,"index":3104},{"krate":0,"index":3105},{"krate":0,"index":3106}],"decl_id":null,"docs":" An encoded CodeGeneratorRequest is written to the plugin's stdin.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3103},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8782580,"byte_end":8782596,"line_start":22,"line_end":22,"column_start":9,"column_end":25},"name":"file_to_generate","qualname":"::compiler::CodeGeneratorRequest::file_to_generate","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":3102},"children":[],"decl_id":null,"docs":" The .proto files that were explicitly listed on the command-line.  The\n code generator should generate code only for these files.  Each file's\n descriptor will be included in proto_file, below.\n","sig":null,"attributes":[{"value":"prost(string, repeated, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8782536,"byte_end":8782571,"line_start":21,"line_end":21,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3104},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8782744,"byte_end":8782753,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"name":"parameter","qualname":"::compiler::CodeGeneratorRequest::parameter","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3102},"children":[],"decl_id":null,"docs":" The generator parameter passed on the command-line.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8782700,"byte_end":8782735,"line_start":24,"line_end":24,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3105},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8783708,"byte_end":8783718,"line_start":41,"line_end":41,"column_start":9,"column_end":19},"name":"proto_file","qualname":"::compiler::CodeGeneratorRequest::proto_file","value":"std::vec::Vec<FileDescriptorProto>","parent":{"krate":0,"index":3102},"children":[],"decl_id":null,"docs":" FileDescriptorProtos for all files in files_to_generate and everything\n they import.  The files will appear in topological order, so each file\n appears before any file that imports it.","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"15\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8783662,"byte_end":8783699,"line_start":40,"line_end":40,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":3106},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8783863,"byte_end":8783879,"line_start":44,"line_end":44,"column_start":9,"column_end":25},"name":"compiler_version","qualname":"::compiler::CodeGeneratorRequest::compiler_version","value":"std::option::Option<compiler::Version>","parent":{"krate":0,"index":3102},"children":[],"decl_id":null,"docs":" The version number of protocol compiler.\n","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"3\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8783818,"byte_end":8783854,"line_start":43,"line_end":43,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3148},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8782744,"byte_end":8782753,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"name":"parameter","qualname":"<CodeGeneratorRequest>::parameter","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3155},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8784038,"byte_end":8784059,"line_start":48,"line_end":48,"column_start":12,"column_end":33},"name":"CodeGeneratorResponse","qualname":"::compiler::CodeGeneratorResponse","value":"CodeGeneratorResponse { error, file }","parent":null,"children":[{"krate":0,"index":3156},{"krate":0,"index":3157}],"decl_id":null,"docs":" The plugin writes an encoded CodeGeneratorResponse to stdout.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3156},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8784645,"byte_end":8784650,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"name":"error","qualname":"::compiler::CodeGeneratorResponse::error","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3155},"children":[],"decl_id":null,"docs":" Error message.  If non-empty, code generation failed.  The plugin process\n should exit with status code zero even if it reports an error in this way.","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8784601,"byte_end":8784636,"line_start":57,"line_end":57,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3157},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8784746,"byte_end":8784750,"line_start":60,"line_end":60,"column_start":9,"column_end":13},"name":"file","qualname":"::compiler::CodeGeneratorResponse::file","value":"std::vec::Vec<compiler::code_generator_response::File>","parent":{"krate":0,"index":3155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"15\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8784700,"byte_end":8784737,"line_start":59,"line_end":59,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3187},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8784645,"byte_end":8784650,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"name":"error","qualname":"<CodeGeneratorResponse>::error","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3025},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8784810,"byte_end":8784833,"line_start":62,"line_end":62,"column_start":9,"column_end":32},"name":"code_generator_response","qualname":"::compiler::code_generator_response","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","parent":null,"children":[{"krate":0,"index":3194},{"krate":0,"index":3255},{"krate":0,"index":3251},{"krate":0,"index":3252},{"krate":0,"index":3198}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3194},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8784945,"byte_end":8784949,"line_start":65,"line_end":65,"column_start":16,"column_end":20},"name":"File","qualname":"::compiler::code_generator_response::File","value":"File { name, insertion_point, content }","parent":null,"children":[{"krate":0,"index":3195},{"krate":0,"index":3196},{"krate":0,"index":3197}],"decl_id":null,"docs":" Represents a single generated file.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3195},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8785798,"byte_end":8785802,"line_start":78,"line_end":78,"column_start":13,"column_end":17},"name":"name","qualname":"::compiler::code_generator_response::File::name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3194},"children":[],"decl_id":null,"docs":" The file name, relative to the output directory.  The name must not\n contain \".\" or \"..\" components and must be relative, not be absolute (so,\n the file cannot lie outside the output directory).  \"/\" must be used as\n the path separator, not \"\\\".","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8785750,"byte_end":8785785,"line_start":77,"line_end":77,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3196},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8788388,"byte_end":8788403,"line_start":117,"line_end":117,"column_start":13,"column_end":28},"name":"insertion_point","qualname":"::compiler::code_generator_response::File::insertion_point","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3194},"children":[],"decl_id":null,"docs":" If non-empty, indicates that the named file should already exist, and the\n content here is to be inserted into that file at a defined insertion\n point.  This feature allows a code generator to extend the output\n produced by another code generator.  The original generator may provide\n insertion points by placing special annotations in the file that look\n like:\n   @@protoc_insertion_point(NAME)\n The annotation can have arbitrary text before and after it on the line,\n which allows it to be placed in a comment.  NAME should be replaced with\n an identifier naming the point -- this is what other generators will use\n as the insertion_point.  Code inserted at this point will be placed\n immediately above the line containing the insertion point (thus multiple\n insertions to the same point will come out in the order they were added).\n The double-@ is intended to make it unlikely that the generated code\n could contain things that look like insertion points by accident.","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8788340,"byte_end":8788375,"line_start":116,"line_end":116,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3197},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8788537,"byte_end":8788544,"line_start":120,"line_end":120,"column_start":13,"column_end":20},"name":"content","qualname":"::compiler::code_generator_response::File::content","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3194},"children":[],"decl_id":null,"docs":" The file contents.\n","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"15\")","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8788488,"byte_end":8788524,"line_start":119,"line_end":119,"column_start":9,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3248},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8785798,"byte_end":8785802,"line_start":78,"line_end":78,"column_start":13,"column_end":17},"name":"name","qualname":"<File>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3249},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8788388,"byte_end":8788403,"line_start":117,"line_end":117,"column_start":13,"column_end":28},"name":"insertion_point","qualname":"<File>::insertion_point","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3250},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/compiler.rs","byte_start":8788537,"byte_end":8788544,"line_start":120,"line_end":120,"column_start":13,"column_end":20},"name":"content","qualname":"<File>::content","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":193,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":840,"byte_end":848,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":9}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":1967,"byte_end":1975,"line_start":54,"line_end":54,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":2670,"byte_end":2676,"line_start":77,"line_end":77,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":3166,"byte_end":3175,"line_start":94,"line_end":94,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":4165,"byte_end":4174,"line_start":119,"line_end":119,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":4641,"byte_end":4647,"line_start":132,"line_end":132,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":840,"byte_end":848,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":1967,"byte_end":1975,"line_start":54,"line_end":54,"column_start":31,"column_end":39},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2754},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":2670,"byte_end":2676,"line_start":77,"line_end":77,"column_start":25,"column_end":31},"kind":{"Impl":{"id":195}},"from":{"krate":2,"index":29516},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":3166,"byte_end":3175,"line_start":94,"line_end":94,"column_start":6,"column_end":15},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2994},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":4165,"byte_end":4174,"line_start":119,"line_end":119,"column_start":33,"column_end":42},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2994},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.5.0/src/lib.rs","byte_start":4641,"byte_end":4647,"line_start":132,"line_end":132,"column_start":26,"column_end":32},"kind":{"Impl":{"id":198}},"from":{"krate":2,"index":29516},"to":{"krate":2,"index":2258}}]}